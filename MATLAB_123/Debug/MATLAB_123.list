
MATLAB_123.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cfc  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004e90  08004e90  00005e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ec8  08004ec8  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004ec8  08004ec8  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ec8  08004ec8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ec8  08004ec8  00005ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ecc  08004ecc  00005ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004ed0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          0000019c  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001a8  200001a8  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c785  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d59  00000000  00000000  000127c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008f8  00000000  00000000  00014520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006f5  00000000  00000000  00014e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fe5e  00000000  00000000  0001550d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dbcf  00000000  00000000  0003536b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5aea  00000000  00000000  00042f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00108a24  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000023d4  00000000  00000000  00108a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  0010ae3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004e78 	.word	0x08004e78

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004e78 	.word	0x08004e78

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001da:	f000 fc47 	bl	8000a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001de:	f000 f889 	bl	80002f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e2:	f000 fa5b 	bl	800069c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e6:	f000 fa29 	bl	800063c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80001ea:	f000 f8e9 	bl	80003c0 <MX_ADC1_Init>
  MX_ADC2_Init();
 80001ee:	f000 f957 	bl	80004a0 <MX_ADC2_Init>
  MX_ADC3_Init();
 80001f2:	f000 f9b3 	bl	800055c <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  uint32_t adc1_value = 0;  // Valor del potenciómetro 1
 80001f6:	2300      	movs	r3, #0
 80001f8:	613b      	str	r3, [r7, #16]
  uint32_t adc2_value = 0;  // Valor del potenciómetro 2
 80001fa:	2300      	movs	r3, #0
 80001fc:	60fb      	str	r3, [r7, #12]
  uint32_t adc3_value = 0;  // Valor del potenciómetro 3
 80001fe:	2300      	movs	r3, #0
 8000200:	60bb      	str	r3, [r7, #8]
  uint8_t scaled_value1 = 0;  // Valor escalado de potenciómetro 1
 8000202:	2300      	movs	r3, #0
 8000204:	75fb      	strb	r3, [r7, #23]
  uint8_t scaled_value2 = 0;  // Valor escalado de potenciómetro 2
 8000206:	2300      	movs	r3, #0
 8000208:	75bb      	strb	r3, [r7, #22]
  uint8_t scaled_value3 = 0;  // Valor escalado de potenciómetro 3
 800020a:	2300      	movs	r3, #0
 800020c:	757b      	strb	r3, [r7, #21]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
      // Leer potenciómetro 1 (ADC1)
      HAL_ADC_Start(&hadc1);
 800020e:	4834      	ldr	r0, [pc, #208]	@ (80002e0 <main+0x10c>)
 8000210:	f000 fe8c 	bl	8000f2c <HAL_ADC_Start>
      if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8000214:	f04f 31ff 	mov.w	r1, #4294967295
 8000218:	4831      	ldr	r0, [pc, #196]	@ (80002e0 <main+0x10c>)
 800021a:	f000 ffd3 	bl	80011c4 <HAL_ADC_PollForConversion>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d10f      	bne.n	8000244 <main+0x70>
          adc1_value = HAL_ADC_GetValue(&hadc1);
 8000224:	482e      	ldr	r0, [pc, #184]	@ (80002e0 <main+0x10c>)
 8000226:	f001 f8cf 	bl	80013c8 <HAL_ADC_GetValue>
 800022a:	6138      	str	r0, [r7, #16]
          scaled_value1 = (uint8_t)((adc1_value * 255) / 4095);
 800022c:	693a      	ldr	r2, [r7, #16]
 800022e:	4613      	mov	r3, r2
 8000230:	021b      	lsls	r3, r3, #8
 8000232:	1a9a      	subs	r2, r3, r2
 8000234:	4b2b      	ldr	r3, [pc, #172]	@ (80002e4 <main+0x110>)
 8000236:	fba3 1302 	umull	r1, r3, r3, r2
 800023a:	1ad2      	subs	r2, r2, r3
 800023c:	0852      	lsrs	r2, r2, #1
 800023e:	4413      	add	r3, r2
 8000240:	0adb      	lsrs	r3, r3, #11
 8000242:	75fb      	strb	r3, [r7, #23]
      }
      HAL_ADC_Stop(&hadc1);
 8000244:	4826      	ldr	r0, [pc, #152]	@ (80002e0 <main+0x10c>)
 8000246:	f000 ff87 	bl	8001158 <HAL_ADC_Stop>

      // Leer potenciómetro 2 (ADC2)
      HAL_ADC_Start(&hadc2);
 800024a:	4827      	ldr	r0, [pc, #156]	@ (80002e8 <main+0x114>)
 800024c:	f000 fe6e 	bl	8000f2c <HAL_ADC_Start>
      if (HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY) == HAL_OK) {
 8000250:	f04f 31ff 	mov.w	r1, #4294967295
 8000254:	4824      	ldr	r0, [pc, #144]	@ (80002e8 <main+0x114>)
 8000256:	f000 ffb5 	bl	80011c4 <HAL_ADC_PollForConversion>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d10f      	bne.n	8000280 <main+0xac>
          adc2_value = HAL_ADC_GetValue(&hadc2);
 8000260:	4821      	ldr	r0, [pc, #132]	@ (80002e8 <main+0x114>)
 8000262:	f001 f8b1 	bl	80013c8 <HAL_ADC_GetValue>
 8000266:	60f8      	str	r0, [r7, #12]
          scaled_value2 = (uint8_t)((adc2_value * 255) / 4095);
 8000268:	68fa      	ldr	r2, [r7, #12]
 800026a:	4613      	mov	r3, r2
 800026c:	021b      	lsls	r3, r3, #8
 800026e:	1a9a      	subs	r2, r3, r2
 8000270:	4b1c      	ldr	r3, [pc, #112]	@ (80002e4 <main+0x110>)
 8000272:	fba3 1302 	umull	r1, r3, r3, r2
 8000276:	1ad2      	subs	r2, r2, r3
 8000278:	0852      	lsrs	r2, r2, #1
 800027a:	4413      	add	r3, r2
 800027c:	0adb      	lsrs	r3, r3, #11
 800027e:	75bb      	strb	r3, [r7, #22]
      }
      HAL_ADC_Stop(&hadc2);
 8000280:	4819      	ldr	r0, [pc, #100]	@ (80002e8 <main+0x114>)
 8000282:	f000 ff69 	bl	8001158 <HAL_ADC_Stop>

      // Leer potenciómetro 3 (ADC3)
      HAL_ADC_Start(&hadc3);
 8000286:	4819      	ldr	r0, [pc, #100]	@ (80002ec <main+0x118>)
 8000288:	f000 fe50 	bl	8000f2c <HAL_ADC_Start>
      if (HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY) == HAL_OK) {
 800028c:	f04f 31ff 	mov.w	r1, #4294967295
 8000290:	4816      	ldr	r0, [pc, #88]	@ (80002ec <main+0x118>)
 8000292:	f000 ff97 	bl	80011c4 <HAL_ADC_PollForConversion>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d10f      	bne.n	80002bc <main+0xe8>
          adc3_value = HAL_ADC_GetValue(&hadc3);
 800029c:	4813      	ldr	r0, [pc, #76]	@ (80002ec <main+0x118>)
 800029e:	f001 f893 	bl	80013c8 <HAL_ADC_GetValue>
 80002a2:	60b8      	str	r0, [r7, #8]
          scaled_value3 = (uint8_t)((adc3_value * 255) / 4095);
 80002a4:	68ba      	ldr	r2, [r7, #8]
 80002a6:	4613      	mov	r3, r2
 80002a8:	021b      	lsls	r3, r3, #8
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	4b0d      	ldr	r3, [pc, #52]	@ (80002e4 <main+0x110>)
 80002ae:	fba3 1302 	umull	r1, r3, r3, r2
 80002b2:	1ad2      	subs	r2, r2, r3
 80002b4:	0852      	lsrs	r2, r2, #1
 80002b6:	4413      	add	r3, r2
 80002b8:	0adb      	lsrs	r3, r3, #11
 80002ba:	757b      	strb	r3, [r7, #21]
      }
      HAL_ADC_Stop(&hadc3);
 80002bc:	480b      	ldr	r0, [pc, #44]	@ (80002ec <main+0x118>)
 80002be:	f000 ff4b 	bl	8001158 <HAL_ADC_Stop>

      // Colocar los tres valores en el buffer
      data_buffer[0] = scaled_value1;
 80002c2:	7dfb      	ldrb	r3, [r7, #23]
 80002c4:	713b      	strb	r3, [r7, #4]
      data_buffer[1] = scaled_value2;
 80002c6:	7dbb      	ldrb	r3, [r7, #22]
 80002c8:	717b      	strb	r3, [r7, #5]
      data_buffer[2] = scaled_value3;
 80002ca:	7d7b      	ldrb	r3, [r7, #21]
 80002cc:	71bb      	strb	r3, [r7, #6]

      // Enviar los tres valores por UART
      HAL_UART_Transmit(&huart2, data_buffer, sizeof(data_buffer), HAL_MAX_DELAY);
 80002ce:	1d39      	adds	r1, r7, #4
 80002d0:	f04f 33ff 	mov.w	r3, #4294967295
 80002d4:	2203      	movs	r2, #3
 80002d6:	4806      	ldr	r0, [pc, #24]	@ (80002f0 <main+0x11c>)
 80002d8:	f003 fdd8 	bl	8003e8c <HAL_UART_Transmit>
      HAL_ADC_Start(&hadc1);
 80002dc:	e797      	b.n	800020e <main+0x3a>
 80002de:	bf00      	nop
 80002e0:	20000028 	.word	0x20000028
 80002e4:	00100101 	.word	0x00100101
 80002e8:	20000078 	.word	0x20000078
 80002ec:	200000c8 	.word	0x200000c8
 80002f0:	20000118 	.word	0x20000118

080002f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b0a6      	sub	sp, #152	@ 0x98
 80002f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fa:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80002fe:	2228      	movs	r2, #40	@ 0x28
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f004 fd8b 	bl	8004e1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000308:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800030c:	2200      	movs	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	605a      	str	r2, [r3, #4]
 8000312:	609a      	str	r2, [r3, #8]
 8000314:	60da      	str	r2, [r3, #12]
 8000316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	2258      	movs	r2, #88	@ 0x58
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f004 fd7d 	bl	8004e1e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000324:	2302      	movs	r3, #2
 8000326:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000328:	2301      	movs	r3, #1
 800032a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800032c:	2310      	movs	r3, #16
 800032e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000332:	2302      	movs	r3, #2
 8000334:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000338:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800033c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000340:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000344:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000348:	2300      	movs	r3, #0
 800034a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000352:	4618      	mov	r0, r3
 8000354:	f002 f8ba 	bl	80024cc <HAL_RCC_OscConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800035e:	f000 f9ef 	bl	8000740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000362:	230f      	movs	r3, #15
 8000364:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000366:	2302      	movs	r3, #2
 8000368:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036a:	2300      	movs	r3, #0
 800036c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800036e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000372:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000374:	2300      	movs	r3, #0
 8000376:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000378:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800037c:	2102      	movs	r1, #2
 800037e:	4618      	mov	r0, r3
 8000380:	f003 f8f8 	bl	8003574 <HAL_RCC_ClockConfig>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800038a:	f000 f9d9 	bl	8000740 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 800038e:	f44f 73c1 	mov.w	r3, #386	@ 0x182
 8000392:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000394:	2300      	movs	r3, #0
 8000396:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000398:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800039c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 800039e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003a2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	4618      	mov	r0, r3
 80003a8:	f003 fb04 	bl	80039b4 <HAL_RCCEx_PeriphCLKConfig>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80003b2:	f000 f9c5 	bl	8000740 <Error_Handler>
  }
}
 80003b6:	bf00      	nop
 80003b8:	3798      	adds	r7, #152	@ 0x98
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
	...

080003c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b08a      	sub	sp, #40	@ 0x28
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003c6:	f107 031c 	add.w	r3, r7, #28
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	609a      	str	r2, [r3, #8]
 80003dc:	60da      	str	r2, [r3, #12]
 80003de:	611a      	str	r2, [r3, #16]
 80003e0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003e2:	4b2e      	ldr	r3, [pc, #184]	@ (800049c <MX_ADC1_Init+0xdc>)
 80003e4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80003e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003ea:	4b2c      	ldr	r3, [pc, #176]	@ (800049c <MX_ADC1_Init+0xdc>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003f0:	4b2a      	ldr	r3, [pc, #168]	@ (800049c <MX_ADC1_Init+0xdc>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003f6:	4b29      	ldr	r3, [pc, #164]	@ (800049c <MX_ADC1_Init+0xdc>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003fc:	4b27      	ldr	r3, [pc, #156]	@ (800049c <MX_ADC1_Init+0xdc>)
 80003fe:	2200      	movs	r2, #0
 8000400:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000402:	4b26      	ldr	r3, [pc, #152]	@ (800049c <MX_ADC1_Init+0xdc>)
 8000404:	2200      	movs	r2, #0
 8000406:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800040a:	4b24      	ldr	r3, [pc, #144]	@ (800049c <MX_ADC1_Init+0xdc>)
 800040c:	2200      	movs	r2, #0
 800040e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000410:	4b22      	ldr	r3, [pc, #136]	@ (800049c <MX_ADC1_Init+0xdc>)
 8000412:	2201      	movs	r2, #1
 8000414:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000416:	4b21      	ldr	r3, [pc, #132]	@ (800049c <MX_ADC1_Init+0xdc>)
 8000418:	2200      	movs	r2, #0
 800041a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800041c:	4b1f      	ldr	r3, [pc, #124]	@ (800049c <MX_ADC1_Init+0xdc>)
 800041e:	2201      	movs	r2, #1
 8000420:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000422:	4b1e      	ldr	r3, [pc, #120]	@ (800049c <MX_ADC1_Init+0xdc>)
 8000424:	2200      	movs	r2, #0
 8000426:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800042a:	4b1c      	ldr	r3, [pc, #112]	@ (800049c <MX_ADC1_Init+0xdc>)
 800042c:	2204      	movs	r2, #4
 800042e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000430:	4b1a      	ldr	r3, [pc, #104]	@ (800049c <MX_ADC1_Init+0xdc>)
 8000432:	2200      	movs	r2, #0
 8000434:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000436:	4b19      	ldr	r3, [pc, #100]	@ (800049c <MX_ADC1_Init+0xdc>)
 8000438:	2200      	movs	r2, #0
 800043a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800043c:	4817      	ldr	r0, [pc, #92]	@ (800049c <MX_ADC1_Init+0xdc>)
 800043e:	f000 fb7b 	bl	8000b38 <HAL_ADC_Init>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000448:	f000 f97a 	bl	8000740 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800044c:	2300      	movs	r3, #0
 800044e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000450:	f107 031c 	add.w	r3, r7, #28
 8000454:	4619      	mov	r1, r3
 8000456:	4811      	ldr	r0, [pc, #68]	@ (800049c <MX_ADC1_Init+0xdc>)
 8000458:	f001 faae 	bl	80019b8 <HAL_ADCEx_MultiModeConfigChannel>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000462:	f000 f96d 	bl	8000740 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000466:	2301      	movs	r3, #1
 8000468:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800046a:	2301      	movs	r3, #1
 800046c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800046e:	2300      	movs	r3, #0
 8000470:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000472:	2300      	movs	r3, #0
 8000474:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000476:	2300      	movs	r3, #0
 8000478:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800047a:	2300      	movs	r3, #0
 800047c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	4619      	mov	r1, r3
 8000482:	4806      	ldr	r0, [pc, #24]	@ (800049c <MX_ADC1_Init+0xdc>)
 8000484:	f000 ffae 	bl	80013e4 <HAL_ADC_ConfigChannel>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800048e:	f000 f957 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000492:	bf00      	nop
 8000494:	3728      	adds	r7, #40	@ 0x28
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	20000028 	.word	0x20000028

080004a0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004a6:	463b      	mov	r3, r7
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	605a      	str	r2, [r3, #4]
 80004ae:	609a      	str	r2, [r3, #8]
 80004b0:	60da      	str	r2, [r3, #12]
 80004b2:	611a      	str	r2, [r3, #16]
 80004b4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80004b6:	4b27      	ldr	r3, [pc, #156]	@ (8000554 <MX_ADC2_Init+0xb4>)
 80004b8:	4a27      	ldr	r2, [pc, #156]	@ (8000558 <MX_ADC2_Init+0xb8>)
 80004ba:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004bc:	4b25      	ldr	r3, [pc, #148]	@ (8000554 <MX_ADC2_Init+0xb4>)
 80004be:	2200      	movs	r2, #0
 80004c0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80004c2:	4b24      	ldr	r3, [pc, #144]	@ (8000554 <MX_ADC2_Init+0xb4>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004c8:	4b22      	ldr	r3, [pc, #136]	@ (8000554 <MX_ADC2_Init+0xb4>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80004ce:	4b21      	ldr	r3, [pc, #132]	@ (8000554 <MX_ADC2_Init+0xb4>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80004d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000554 <MX_ADC2_Init+0xb4>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000554 <MX_ADC2_Init+0xb4>)
 80004de:	2200      	movs	r2, #0
 80004e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000554 <MX_ADC2_Init+0xb4>)
 80004e4:	2201      	movs	r2, #1
 80004e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000554 <MX_ADC2_Init+0xb4>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80004ee:	4b19      	ldr	r3, [pc, #100]	@ (8000554 <MX_ADC2_Init+0xb4>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80004f4:	4b17      	ldr	r3, [pc, #92]	@ (8000554 <MX_ADC2_Init+0xb4>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004fc:	4b15      	ldr	r3, [pc, #84]	@ (8000554 <MX_ADC2_Init+0xb4>)
 80004fe:	2204      	movs	r2, #4
 8000500:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000502:	4b14      	ldr	r3, [pc, #80]	@ (8000554 <MX_ADC2_Init+0xb4>)
 8000504:	2200      	movs	r2, #0
 8000506:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000508:	4b12      	ldr	r3, [pc, #72]	@ (8000554 <MX_ADC2_Init+0xb4>)
 800050a:	2200      	movs	r2, #0
 800050c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800050e:	4811      	ldr	r0, [pc, #68]	@ (8000554 <MX_ADC2_Init+0xb4>)
 8000510:	f000 fb12 	bl	8000b38 <HAL_ADC_Init>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800051a:	f000 f911 	bl	8000740 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800051e:	2302      	movs	r3, #2
 8000520:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000522:	2301      	movs	r3, #1
 8000524:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800052a:	2300      	movs	r3, #0
 800052c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800052e:	2300      	movs	r3, #0
 8000530:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000536:	463b      	mov	r3, r7
 8000538:	4619      	mov	r1, r3
 800053a:	4806      	ldr	r0, [pc, #24]	@ (8000554 <MX_ADC2_Init+0xb4>)
 800053c:	f000 ff52 	bl	80013e4 <HAL_ADC_ConfigChannel>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000546:	f000 f8fb 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800054a:	bf00      	nop
 800054c:	3718      	adds	r7, #24
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20000078 	.word	0x20000078
 8000558:	50000100 	.word	0x50000100

0800055c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	@ 0x28
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000562:	f107 031c 	add.w	r3, r7, #28
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
 800057c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800057e:	4b2d      	ldr	r3, [pc, #180]	@ (8000634 <MX_ADC3_Init+0xd8>)
 8000580:	4a2d      	ldr	r2, [pc, #180]	@ (8000638 <MX_ADC3_Init+0xdc>)
 8000582:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000584:	4b2b      	ldr	r3, [pc, #172]	@ (8000634 <MX_ADC3_Init+0xd8>)
 8000586:	2200      	movs	r2, #0
 8000588:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800058a:	4b2a      	ldr	r3, [pc, #168]	@ (8000634 <MX_ADC3_Init+0xd8>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000590:	4b28      	ldr	r3, [pc, #160]	@ (8000634 <MX_ADC3_Init+0xd8>)
 8000592:	2200      	movs	r2, #0
 8000594:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000596:	4b27      	ldr	r3, [pc, #156]	@ (8000634 <MX_ADC3_Init+0xd8>)
 8000598:	2200      	movs	r2, #0
 800059a:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800059c:	4b25      	ldr	r3, [pc, #148]	@ (8000634 <MX_ADC3_Init+0xd8>)
 800059e:	2200      	movs	r2, #0
 80005a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005a4:	4b23      	ldr	r3, [pc, #140]	@ (8000634 <MX_ADC3_Init+0xd8>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005aa:	4b22      	ldr	r3, [pc, #136]	@ (8000634 <MX_ADC3_Init+0xd8>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b0:	4b20      	ldr	r3, [pc, #128]	@ (8000634 <MX_ADC3_Init+0xd8>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80005b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000634 <MX_ADC3_Init+0xd8>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80005bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000634 <MX_ADC3_Init+0xd8>)
 80005be:	2200      	movs	r2, #0
 80005c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000634 <MX_ADC3_Init+0xd8>)
 80005c6:	2204      	movs	r2, #4
 80005c8:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80005ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000634 <MX_ADC3_Init+0xd8>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005d0:	4b18      	ldr	r3, [pc, #96]	@ (8000634 <MX_ADC3_Init+0xd8>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80005d6:	4817      	ldr	r0, [pc, #92]	@ (8000634 <MX_ADC3_Init+0xd8>)
 80005d8:	f000 faae 	bl	8000b38 <HAL_ADC_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 80005e2:	f000 f8ad 	bl	8000740 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	4619      	mov	r1, r3
 80005f0:	4810      	ldr	r0, [pc, #64]	@ (8000634 <MX_ADC3_Init+0xd8>)
 80005f2:	f001 f9e1 	bl	80019b8 <HAL_ADCEx_MultiModeConfigChannel>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 80005fc:	f000 f8a0 	bl	8000740 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000600:	2301      	movs	r3, #1
 8000602:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000604:	2301      	movs	r3, #1
 8000606:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000608:	2300      	movs	r3, #0
 800060a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	4619      	mov	r1, r3
 800061c:	4805      	ldr	r0, [pc, #20]	@ (8000634 <MX_ADC3_Init+0xd8>)
 800061e:	f000 fee1 	bl	80013e4 <HAL_ADC_ConfigChannel>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000628:	f000 f88a 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	3728      	adds	r7, #40	@ 0x28
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	200000c8 	.word	0x200000c8
 8000638:	50000400 	.word	0x50000400

0800063c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000640:	4b14      	ldr	r3, [pc, #80]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000642:	4a15      	ldr	r2, [pc, #84]	@ (8000698 <MX_USART2_UART_Init+0x5c>)
 8000644:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000646:	4b13      	ldr	r3, [pc, #76]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000648:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800064c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800064e:	4b11      	ldr	r3, [pc, #68]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000654:	4b0f      	ldr	r3, [pc, #60]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800065a:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000662:	220c      	movs	r2, #12
 8000664:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000666:	4b0b      	ldr	r3, [pc, #44]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800066c:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000672:	4b08      	ldr	r3, [pc, #32]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000674:	2200      	movs	r2, #0
 8000676:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000678:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 800067a:	2200      	movs	r2, #0
 800067c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800067e:	4805      	ldr	r0, [pc, #20]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000680:	f003 fbb6 	bl	8003df0 <HAL_UART_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800068a:	f000 f859 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000118 	.word	0x20000118
 8000698:	40004400 	.word	0x40004400

0800069c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	@ 0x28
 80006a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b2:	4b21      	ldr	r3, [pc, #132]	@ (8000738 <MX_GPIO_Init+0x9c>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	4a20      	ldr	r2, [pc, #128]	@ (8000738 <MX_GPIO_Init+0x9c>)
 80006b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80006bc:	6153      	str	r3, [r2, #20]
 80006be:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <MX_GPIO_Init+0x9c>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <MX_GPIO_Init+0x9c>)
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	4a1a      	ldr	r2, [pc, #104]	@ (8000738 <MX_GPIO_Init+0x9c>)
 80006d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006d4:	6153      	str	r3, [r2, #20]
 80006d6:	4b18      	ldr	r3, [pc, #96]	@ (8000738 <MX_GPIO_Init+0x9c>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <MX_GPIO_Init+0x9c>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	4a14      	ldr	r2, [pc, #80]	@ (8000738 <MX_GPIO_Init+0x9c>)
 80006e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006ec:	6153      	str	r3, [r2, #20]
 80006ee:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <MX_GPIO_Init+0x9c>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000738 <MX_GPIO_Init+0x9c>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000738 <MX_GPIO_Init+0x9c>)
 8000700:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000704:	6153      	str	r3, [r2, #20]
 8000706:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <MX_GPIO_Init+0x9c>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000712:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000718:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800071c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	4619      	mov	r1, r3
 8000728:	4804      	ldr	r0, [pc, #16]	@ (800073c <MX_GPIO_Init+0xa0>)
 800072a:	f001 fd45 	bl	80021b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800072e:	bf00      	nop
 8000730:	3728      	adds	r7, #40	@ 0x28
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40021000 	.word	0x40021000
 800073c:	48000800 	.word	0x48000800

08000740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000744:	b672      	cpsid	i
}
 8000746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <Error_Handler+0x8>

0800074c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000752:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <HAL_MspInit+0x44>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	4a0e      	ldr	r2, [pc, #56]	@ (8000790 <HAL_MspInit+0x44>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6193      	str	r3, [r2, #24]
 800075e:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <HAL_MspInit+0x44>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <HAL_MspInit+0x44>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	4a08      	ldr	r2, [pc, #32]	@ (8000790 <HAL_MspInit+0x44>)
 8000770:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000774:	61d3      	str	r3, [r2, #28]
 8000776:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <HAL_MspInit+0x44>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000782:	2007      	movs	r0, #7
 8000784:	f001 fc5a 	bl	800203c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40021000 	.word	0x40021000

08000794 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08e      	sub	sp, #56	@ 0x38
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80007b4:	d12e      	bne.n	8000814 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007b6:	4b48      	ldr	r3, [pc, #288]	@ (80008d8 <HAL_ADC_MspInit+0x144>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	3301      	adds	r3, #1
 80007bc:	4a46      	ldr	r2, [pc, #280]	@ (80008d8 <HAL_ADC_MspInit+0x144>)
 80007be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80007c0:	4b45      	ldr	r3, [pc, #276]	@ (80008d8 <HAL_ADC_MspInit+0x144>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d10b      	bne.n	80007e0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80007c8:	4b44      	ldr	r3, [pc, #272]	@ (80008dc <HAL_ADC_MspInit+0x148>)
 80007ca:	695b      	ldr	r3, [r3, #20]
 80007cc:	4a43      	ldr	r2, [pc, #268]	@ (80008dc <HAL_ADC_MspInit+0x148>)
 80007ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007d2:	6153      	str	r3, [r2, #20]
 80007d4:	4b41      	ldr	r3, [pc, #260]	@ (80008dc <HAL_ADC_MspInit+0x148>)
 80007d6:	695b      	ldr	r3, [r3, #20]
 80007d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007dc:	623b      	str	r3, [r7, #32]
 80007de:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e0:	4b3e      	ldr	r3, [pc, #248]	@ (80008dc <HAL_ADC_MspInit+0x148>)
 80007e2:	695b      	ldr	r3, [r3, #20]
 80007e4:	4a3d      	ldr	r2, [pc, #244]	@ (80008dc <HAL_ADC_MspInit+0x148>)
 80007e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007ea:	6153      	str	r3, [r2, #20]
 80007ec:	4b3b      	ldr	r3, [pc, #236]	@ (80008dc <HAL_ADC_MspInit+0x148>)
 80007ee:	695b      	ldr	r3, [r3, #20]
 80007f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007f4:	61fb      	str	r3, [r7, #28]
 80007f6:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007f8:	2301      	movs	r3, #1
 80007fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007fc:	2303      	movs	r3, #3
 80007fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000808:	4619      	mov	r1, r3
 800080a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800080e:	f001 fcd3 	bl	80021b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000812:	e05c      	b.n	80008ce <HAL_ADC_MspInit+0x13a>
  else if(hadc->Instance==ADC2)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a31      	ldr	r2, [pc, #196]	@ (80008e0 <HAL_ADC_MspInit+0x14c>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d12e      	bne.n	800087c <HAL_ADC_MspInit+0xe8>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800081e:	4b2e      	ldr	r3, [pc, #184]	@ (80008d8 <HAL_ADC_MspInit+0x144>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	3301      	adds	r3, #1
 8000824:	4a2c      	ldr	r2, [pc, #176]	@ (80008d8 <HAL_ADC_MspInit+0x144>)
 8000826:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000828:	4b2b      	ldr	r3, [pc, #172]	@ (80008d8 <HAL_ADC_MspInit+0x144>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d10b      	bne.n	8000848 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000830:	4b2a      	ldr	r3, [pc, #168]	@ (80008dc <HAL_ADC_MspInit+0x148>)
 8000832:	695b      	ldr	r3, [r3, #20]
 8000834:	4a29      	ldr	r2, [pc, #164]	@ (80008dc <HAL_ADC_MspInit+0x148>)
 8000836:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800083a:	6153      	str	r3, [r2, #20]
 800083c:	4b27      	ldr	r3, [pc, #156]	@ (80008dc <HAL_ADC_MspInit+0x148>)
 800083e:	695b      	ldr	r3, [r3, #20]
 8000840:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000844:	61bb      	str	r3, [r7, #24]
 8000846:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000848:	4b24      	ldr	r3, [pc, #144]	@ (80008dc <HAL_ADC_MspInit+0x148>)
 800084a:	695b      	ldr	r3, [r3, #20]
 800084c:	4a23      	ldr	r2, [pc, #140]	@ (80008dc <HAL_ADC_MspInit+0x148>)
 800084e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000852:	6153      	str	r3, [r2, #20]
 8000854:	4b21      	ldr	r3, [pc, #132]	@ (80008dc <HAL_ADC_MspInit+0x148>)
 8000856:	695b      	ldr	r3, [r3, #20]
 8000858:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000860:	2320      	movs	r3, #32
 8000862:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000864:	2303      	movs	r3, #3
 8000866:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000870:	4619      	mov	r1, r3
 8000872:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000876:	f001 fc9f 	bl	80021b8 <HAL_GPIO_Init>
}
 800087a:	e028      	b.n	80008ce <HAL_ADC_MspInit+0x13a>
  else if(hadc->Instance==ADC3)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a18      	ldr	r2, [pc, #96]	@ (80008e4 <HAL_ADC_MspInit+0x150>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d123      	bne.n	80008ce <HAL_ADC_MspInit+0x13a>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8000886:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <HAL_ADC_MspInit+0x148>)
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	4a14      	ldr	r2, [pc, #80]	@ (80008dc <HAL_ADC_MspInit+0x148>)
 800088c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000890:	6153      	str	r3, [r2, #20]
 8000892:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <HAL_ADC_MspInit+0x148>)
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <HAL_ADC_MspInit+0x148>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	4a0e      	ldr	r2, [pc, #56]	@ (80008dc <HAL_ADC_MspInit+0x148>)
 80008a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008a8:	6153      	str	r3, [r2, #20]
 80008aa:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <HAL_ADC_MspInit+0x148>)
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008b6:	2302      	movs	r3, #2
 80008b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ba:	2303      	movs	r3, #3
 80008bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008c6:	4619      	mov	r1, r3
 80008c8:	4807      	ldr	r0, [pc, #28]	@ (80008e8 <HAL_ADC_MspInit+0x154>)
 80008ca:	f001 fc75 	bl	80021b8 <HAL_GPIO_Init>
}
 80008ce:	bf00      	nop
 80008d0:	3738      	adds	r7, #56	@ 0x38
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200001a0 	.word	0x200001a0
 80008dc:	40021000 	.word	0x40021000
 80008e0:	50000100 	.word	0x50000100
 80008e4:	50000400 	.word	0x50000400
 80008e8:	48000400 	.word	0x48000400

080008ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	@ 0x28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a1b      	ldr	r2, [pc, #108]	@ (8000978 <HAL_UART_MspInit+0x8c>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d130      	bne.n	8000970 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800090e:	4b1b      	ldr	r3, [pc, #108]	@ (800097c <HAL_UART_MspInit+0x90>)
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	4a1a      	ldr	r2, [pc, #104]	@ (800097c <HAL_UART_MspInit+0x90>)
 8000914:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000918:	61d3      	str	r3, [r2, #28]
 800091a:	4b18      	ldr	r3, [pc, #96]	@ (800097c <HAL_UART_MspInit+0x90>)
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b15      	ldr	r3, [pc, #84]	@ (800097c <HAL_UART_MspInit+0x90>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	4a14      	ldr	r2, [pc, #80]	@ (800097c <HAL_UART_MspInit+0x90>)
 800092c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000930:	6153      	str	r3, [r2, #20]
 8000932:	4b12      	ldr	r3, [pc, #72]	@ (800097c <HAL_UART_MspInit+0x90>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800093e:	230c      	movs	r3, #12
 8000940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800094e:	2307      	movs	r3, #7
 8000950:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800095c:	f001 fc2c 	bl	80021b8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2100      	movs	r1, #0
 8000964:	2026      	movs	r0, #38	@ 0x26
 8000966:	f001 fb74 	bl	8002052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800096a:	2026      	movs	r0, #38	@ 0x26
 800096c:	f001 fb8d 	bl	800208a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000970:	bf00      	nop
 8000972:	3728      	adds	r7, #40	@ 0x28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40004400 	.word	0x40004400
 800097c:	40021000 	.word	0x40021000

08000980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <NMI_Handler+0x4>

08000988 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <HardFault_Handler+0x4>

08000990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <MemManage_Handler+0x4>

08000998 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <BusFault_Handler+0x4>

080009a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <UsageFault_Handler+0x4>

080009a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d6:	f000 f88f 	bl	8000af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009e4:	4802      	ldr	r0, [pc, #8]	@ (80009f0 <USART2_IRQHandler+0x10>)
 80009e6:	f003 fadb 	bl	8003fa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000118 	.word	0x20000118

080009f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f8:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <SystemInit+0x20>)
 80009fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009fe:	4a05      	ldr	r2, [pc, #20]	@ (8000a14 <SystemInit+0x20>)
 8000a00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a50 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a1c:	f7ff ffea 	bl	80009f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a20:	480c      	ldr	r0, [pc, #48]	@ (8000a54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a22:	490d      	ldr	r1, [pc, #52]	@ (8000a58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a24:	4a0d      	ldr	r2, [pc, #52]	@ (8000a5c <LoopForever+0xe>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a28:	e002      	b.n	8000a30 <LoopCopyDataInit>

08000a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2e:	3304      	adds	r3, #4

08000a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a34:	d3f9      	bcc.n	8000a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a36:	4a0a      	ldr	r2, [pc, #40]	@ (8000a60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a38:	4c0a      	ldr	r4, [pc, #40]	@ (8000a64 <LoopForever+0x16>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a3c:	e001      	b.n	8000a42 <LoopFillZerobss>

08000a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a40:	3204      	adds	r2, #4

08000a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a44:	d3fb      	bcc.n	8000a3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a46:	f004 f9f3 	bl	8004e30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a4a:	f7ff fbc3 	bl	80001d4 <main>

08000a4e <LoopForever>:

LoopForever:
    b LoopForever
 8000a4e:	e7fe      	b.n	8000a4e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a50:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a5c:	08004ed0 	.word	0x08004ed0
  ldr r2, =_sbss
 8000a60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a64:	200001a8 	.word	0x200001a8

08000a68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a68:	e7fe      	b.n	8000a68 <ADC1_2_IRQHandler>
	...

08000a6c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a70:	4b08      	ldr	r3, [pc, #32]	@ (8000a94 <HAL_Init+0x28>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a07      	ldr	r2, [pc, #28]	@ (8000a94 <HAL_Init+0x28>)
 8000a76:	f043 0310 	orr.w	r3, r3, #16
 8000a7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a7c:	2003      	movs	r0, #3
 8000a7e:	f001 fadd 	bl	800203c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a82:	2000      	movs	r0, #0
 8000a84:	f000 f808 	bl	8000a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a88:	f7ff fe60 	bl	800074c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40022000 	.word	0x40022000

08000a98 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa0:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <HAL_InitTick+0x54>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b12      	ldr	r3, [pc, #72]	@ (8000af0 <HAL_InitTick+0x58>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 faf5 	bl	80020a6 <HAL_SYSTICK_Config>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e00e      	b.n	8000ae4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2b0f      	cmp	r3, #15
 8000aca:	d80a      	bhi.n	8000ae2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000acc:	2200      	movs	r2, #0
 8000ace:	6879      	ldr	r1, [r7, #4]
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	f001 fabd 	bl	8002052 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad8:	4a06      	ldr	r2, [pc, #24]	@ (8000af4 <HAL_InitTick+0x5c>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	e000      	b.n	8000ae4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000000 	.word	0x20000000
 8000af0:	20000008 	.word	0x20000008
 8000af4:	20000004 	.word	0x20000004

08000af8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000afc:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <HAL_IncTick+0x20>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <HAL_IncTick+0x24>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	4a04      	ldr	r2, [pc, #16]	@ (8000b1c <HAL_IncTick+0x24>)
 8000b0a:	6013      	str	r3, [r2, #0]
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	200001a4 	.word	0x200001a4

08000b20 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b24:	4b03      	ldr	r3, [pc, #12]	@ (8000b34 <HAL_GetTick+0x14>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	200001a4 	.word	0x200001a4

08000b38 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b09a      	sub	sp, #104	@ 0x68
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b40:	2300      	movs	r3, #0
 8000b42:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000b46:	2300      	movs	r3, #0
 8000b48:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d101      	bne.n	8000b58 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000b54:	2301      	movs	r3, #1
 8000b56:	e1e3      	b.n	8000f20 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	691b      	ldr	r3, [r3, #16]
 8000b5c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b62:	f003 0310 	and.w	r3, r3, #16
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d176      	bne.n	8000c58 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d152      	bne.n	8000c18 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2200      	movs	r2, #0
 8000b76:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2200      	movs	r2, #0
 8000b82:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2200      	movs	r2, #0
 8000b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff fe01 	bl	8000794 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d13b      	bne.n	8000c18 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f001 f85f 	bl	8001c64 <ADC_Disable>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb0:	f003 0310 	and.w	r3, r3, #16
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d12f      	bne.n	8000c18 <HAL_ADC_Init+0xe0>
 8000bb8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d12b      	bne.n	8000c18 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000bc8:	f023 0302 	bic.w	r3, r3, #2
 8000bcc:	f043 0202 	orr.w	r2, r3, #2
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	689a      	ldr	r2, [r3, #8]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000be2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	689a      	ldr	r2, [r3, #8]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000bf2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000bf4:	4b92      	ldr	r3, [pc, #584]	@ (8000e40 <HAL_ADC_Init+0x308>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a92      	ldr	r2, [pc, #584]	@ (8000e44 <HAL_ADC_Init+0x30c>)
 8000bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfe:	0c9a      	lsrs	r2, r3, #18
 8000c00:	4613      	mov	r3, r2
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	4413      	add	r3, r2
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c0a:	e002      	b.n	8000c12 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d1f9      	bne.n	8000c0c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d007      	beq.n	8000c36 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c34:	d110      	bne.n	8000c58 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3a:	f023 0312 	bic.w	r3, r3, #18
 8000c3e:	f043 0210 	orr.w	r2, r3, #16
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4a:	f043 0201 	orr.w	r2, r3, #1
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5c:	f003 0310 	and.w	r3, r3, #16
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	f040 8150 	bne.w	8000f06 <HAL_ADC_Init+0x3ce>
 8000c66:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f040 814b 	bne.w	8000f06 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f040 8143 	bne.w	8000f06 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c84:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000c88:	f043 0202 	orr.w	r2, r3, #2
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c98:	d004      	beq.n	8000ca4 <HAL_ADC_Init+0x16c>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a6a      	ldr	r2, [pc, #424]	@ (8000e48 <HAL_ADC_Init+0x310>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d101      	bne.n	8000ca8 <HAL_ADC_Init+0x170>
 8000ca4:	4b69      	ldr	r3, [pc, #420]	@ (8000e4c <HAL_ADC_Init+0x314>)
 8000ca6:	e000      	b.n	8000caa <HAL_ADC_Init+0x172>
 8000ca8:	4b69      	ldr	r3, [pc, #420]	@ (8000e50 <HAL_ADC_Init+0x318>)
 8000caa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000cb4:	d102      	bne.n	8000cbc <HAL_ADC_Init+0x184>
 8000cb6:	4b64      	ldr	r3, [pc, #400]	@ (8000e48 <HAL_ADC_Init+0x310>)
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	e01a      	b.n	8000cf2 <HAL_ADC_Init+0x1ba>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a61      	ldr	r2, [pc, #388]	@ (8000e48 <HAL_ADC_Init+0x310>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d103      	bne.n	8000cce <HAL_ADC_Init+0x196>
 8000cc6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	e011      	b.n	8000cf2 <HAL_ADC_Init+0x1ba>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a60      	ldr	r2, [pc, #384]	@ (8000e54 <HAL_ADC_Init+0x31c>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d102      	bne.n	8000cde <HAL_ADC_Init+0x1a6>
 8000cd8:	4b5f      	ldr	r3, [pc, #380]	@ (8000e58 <HAL_ADC_Init+0x320>)
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	e009      	b.n	8000cf2 <HAL_ADC_Init+0x1ba>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a5d      	ldr	r2, [pc, #372]	@ (8000e58 <HAL_ADC_Init+0x320>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d102      	bne.n	8000cee <HAL_ADC_Init+0x1b6>
 8000ce8:	4b5a      	ldr	r3, [pc, #360]	@ (8000e54 <HAL_ADC_Init+0x31c>)
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	e001      	b.n	8000cf2 <HAL_ADC_Init+0x1ba>
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	f003 0303 	and.w	r3, r3, #3
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d108      	bne.n	8000d12 <HAL_ADC_Init+0x1da>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d101      	bne.n	8000d12 <HAL_ADC_Init+0x1da>
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e000      	b.n	8000d14 <HAL_ADC_Init+0x1dc>
 8000d12:	2300      	movs	r3, #0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d11c      	bne.n	8000d52 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d18:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d010      	beq.n	8000d40 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	f003 0303 	and.w	r3, r3, #3
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d107      	bne.n	8000d3a <HAL_ADC_Init+0x202>
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d101      	bne.n	8000d3a <HAL_ADC_Init+0x202>
 8000d36:	2301      	movs	r3, #1
 8000d38:	e000      	b.n	8000d3c <HAL_ADC_Init+0x204>
 8000d3a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d108      	bne.n	8000d52 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000d40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	431a      	orrs	r2, r3
 8000d4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d50:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	7e5b      	ldrb	r3, [r3, #25]
 8000d56:	035b      	lsls	r3, r3, #13
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000d5c:	2a01      	cmp	r2, #1
 8000d5e:	d002      	beq.n	8000d66 <HAL_ADC_Init+0x22e>
 8000d60:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d64:	e000      	b.n	8000d68 <HAL_ADC_Init+0x230>
 8000d66:	2200      	movs	r2, #0
 8000d68:	431a      	orrs	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	431a      	orrs	r2, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d11b      	bne.n	8000dbe <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	7e5b      	ldrb	r3, [r3, #25]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d109      	bne.n	8000da2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d92:	3b01      	subs	r3, #1
 8000d94:	045a      	lsls	r2, r3, #17
 8000d96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8000da0:	e00d      	b.n	8000dbe <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000daa:	f043 0220 	orr.w	r2, r3, #32
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db6:	f043 0201 	orr.w	r2, r3, #1
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d054      	beq.n	8000e70 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a22      	ldr	r2, [pc, #136]	@ (8000e54 <HAL_ADC_Init+0x31c>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d004      	beq.n	8000dda <HAL_ADC_Init+0x2a2>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a20      	ldr	r2, [pc, #128]	@ (8000e58 <HAL_ADC_Init+0x320>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d140      	bne.n	8000e5c <HAL_ADC_Init+0x324>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dde:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8000de2:	d02a      	beq.n	8000e3a <HAL_ADC_Init+0x302>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000de8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000dec:	d022      	beq.n	8000e34 <HAL_ADC_Init+0x2fc>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000df2:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8000df6:	d01a      	beq.n	8000e2e <HAL_ADC_Init+0x2f6>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dfc:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8000e00:	d012      	beq.n	8000e28 <HAL_ADC_Init+0x2f0>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e06:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8000e0a:	d00a      	beq.n	8000e22 <HAL_ADC_Init+0x2ea>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e10:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8000e14:	d002      	beq.n	8000e1c <HAL_ADC_Init+0x2e4>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e1a:	e023      	b.n	8000e64 <HAL_ADC_Init+0x32c>
 8000e1c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e20:	e020      	b.n	8000e64 <HAL_ADC_Init+0x32c>
 8000e22:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000e26:	e01d      	b.n	8000e64 <HAL_ADC_Init+0x32c>
 8000e28:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000e2c:	e01a      	b.n	8000e64 <HAL_ADC_Init+0x32c>
 8000e2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e32:	e017      	b.n	8000e64 <HAL_ADC_Init+0x32c>
 8000e34:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8000e38:	e014      	b.n	8000e64 <HAL_ADC_Init+0x32c>
 8000e3a:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000e3e:	e011      	b.n	8000e64 <HAL_ADC_Init+0x32c>
 8000e40:	20000000 	.word	0x20000000
 8000e44:	431bde83 	.word	0x431bde83
 8000e48:	50000100 	.word	0x50000100
 8000e4c:	50000300 	.word	0x50000300
 8000e50:	50000700 	.word	0x50000700
 8000e54:	50000400 	.word	0x50000400
 8000e58:	50000500 	.word	0x50000500
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	f003 030c 	and.w	r3, r3, #12
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d114      	bne.n	8000ea8 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	6812      	ldr	r2, [r2, #0]
 8000e88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000e8c:	f023 0302 	bic.w	r3, r3, #2
 8000e90:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	7e1b      	ldrb	r3, [r3, #24]
 8000e96:	039a      	lsls	r2, r3, #14
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	68da      	ldr	r2, [r3, #12]
 8000eae:	4b1e      	ldr	r3, [pc, #120]	@ (8000f28 <HAL_ADC_Init+0x3f0>)
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	6812      	ldr	r2, [r2, #0]
 8000eb6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000eb8:	430b      	orrs	r3, r1
 8000eba:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	691b      	ldr	r3, [r3, #16]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d10c      	bne.n	8000ede <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	f023 010f 	bic.w	r1, r3, #15
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	1e5a      	subs	r2, r3, #1
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	631a      	str	r2, [r3, #48]	@ 0x30
 8000edc:	e007      	b.n	8000eee <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f022 020f 	bic.w	r2, r2, #15
 8000eec:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef8:	f023 0303 	bic.w	r3, r3, #3
 8000efc:	f043 0201 	orr.w	r2, r3, #1
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f04:	e00a      	b.n	8000f1c <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0a:	f023 0312 	bic.w	r3, r3, #18
 8000f0e:	f043 0210 	orr.w	r2, r3, #16
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000f16:	2301      	movs	r3, #1
 8000f18:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000f1c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3768      	adds	r7, #104	@ 0x68
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	fff0c007 	.word	0xfff0c007

08000f2c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f34:	2300      	movs	r3, #0
 8000f36:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	f003 0304 	and.w	r3, r3, #4
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f040 80f9 	bne.w	800113a <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d101      	bne.n	8000f56 <HAL_ADC_Start+0x2a>
 8000f52:	2302      	movs	r3, #2
 8000f54:	e0f4      	b.n	8001140 <HAL_ADC_Start+0x214>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 fe1c 	bl	8001b9c <ADC_Enable>
 8000f64:	4603      	mov	r3, r0
 8000f66:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f040 80e0 	bne.w	8001130 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f74:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000f78:	f023 0301 	bic.w	r3, r3, #1
 8000f7c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f8c:	d004      	beq.n	8000f98 <HAL_ADC_Start+0x6c>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a6d      	ldr	r2, [pc, #436]	@ (8001148 <HAL_ADC_Start+0x21c>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d106      	bne.n	8000fa6 <HAL_ADC_Start+0x7a>
 8000f98:	4b6c      	ldr	r3, [pc, #432]	@ (800114c <HAL_ADC_Start+0x220>)
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	f003 031f 	and.w	r3, r3, #31
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d010      	beq.n	8000fc6 <HAL_ADC_Start+0x9a>
 8000fa4:	e005      	b.n	8000fb2 <HAL_ADC_Start+0x86>
 8000fa6:	4b6a      	ldr	r3, [pc, #424]	@ (8001150 <HAL_ADC_Start+0x224>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f003 031f 	and.w	r3, r3, #31
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d009      	beq.n	8000fc6 <HAL_ADC_Start+0x9a>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000fba:	d004      	beq.n	8000fc6 <HAL_ADC_Start+0x9a>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a64      	ldr	r2, [pc, #400]	@ (8001154 <HAL_ADC_Start+0x228>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d115      	bne.n	8000ff2 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fca:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d036      	beq.n	800104e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000fe8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000ff0:	e02d      	b.n	800104e <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001006:	d004      	beq.n	8001012 <HAL_ADC_Start+0xe6>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a4e      	ldr	r2, [pc, #312]	@ (8001148 <HAL_ADC_Start+0x21c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d10a      	bne.n	8001028 <HAL_ADC_Start+0xfc>
 8001012:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800101c:	2b00      	cmp	r3, #0
 800101e:	bf14      	ite	ne
 8001020:	2301      	movne	r3, #1
 8001022:	2300      	moveq	r3, #0
 8001024:	b2db      	uxtb	r3, r3
 8001026:	e008      	b.n	800103a <HAL_ADC_Start+0x10e>
 8001028:	4b4a      	ldr	r3, [pc, #296]	@ (8001154 <HAL_ADC_Start+0x228>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001030:	2b00      	cmp	r3, #0
 8001032:	bf14      	ite	ne
 8001034:	2301      	movne	r3, #1
 8001036:	2300      	moveq	r3, #0
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d007      	beq.n	800104e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001042:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001046:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001052:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800105a:	d106      	bne.n	800106a <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001060:	f023 0206 	bic.w	r2, r3, #6
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	645a      	str	r2, [r3, #68]	@ 0x44
 8001068:	e002      	b.n	8001070 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	221c      	movs	r2, #28
 800107e:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001088:	d004      	beq.n	8001094 <HAL_ADC_Start+0x168>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a2e      	ldr	r2, [pc, #184]	@ (8001148 <HAL_ADC_Start+0x21c>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d106      	bne.n	80010a2 <HAL_ADC_Start+0x176>
 8001094:	4b2d      	ldr	r3, [pc, #180]	@ (800114c <HAL_ADC_Start+0x220>)
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	f003 031f 	and.w	r3, r3, #31
 800109c:	2b00      	cmp	r3, #0
 800109e:	d03e      	beq.n	800111e <HAL_ADC_Start+0x1f2>
 80010a0:	e005      	b.n	80010ae <HAL_ADC_Start+0x182>
 80010a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001150 <HAL_ADC_Start+0x224>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f003 031f 	and.w	r3, r3, #31
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d037      	beq.n	800111e <HAL_ADC_Start+0x1f2>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010b6:	d004      	beq.n	80010c2 <HAL_ADC_Start+0x196>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a22      	ldr	r2, [pc, #136]	@ (8001148 <HAL_ADC_Start+0x21c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d106      	bne.n	80010d0 <HAL_ADC_Start+0x1a4>
 80010c2:	4b22      	ldr	r3, [pc, #136]	@ (800114c <HAL_ADC_Start+0x220>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f003 031f 	and.w	r3, r3, #31
 80010ca:	2b05      	cmp	r3, #5
 80010cc:	d027      	beq.n	800111e <HAL_ADC_Start+0x1f2>
 80010ce:	e005      	b.n	80010dc <HAL_ADC_Start+0x1b0>
 80010d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001150 <HAL_ADC_Start+0x224>)
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f003 031f 	and.w	r3, r3, #31
 80010d8:	2b05      	cmp	r3, #5
 80010da:	d020      	beq.n	800111e <HAL_ADC_Start+0x1f2>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010e4:	d004      	beq.n	80010f0 <HAL_ADC_Start+0x1c4>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a17      	ldr	r2, [pc, #92]	@ (8001148 <HAL_ADC_Start+0x21c>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d106      	bne.n	80010fe <HAL_ADC_Start+0x1d2>
 80010f0:	4b16      	ldr	r3, [pc, #88]	@ (800114c <HAL_ADC_Start+0x220>)
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f003 031f 	and.w	r3, r3, #31
 80010f8:	2b09      	cmp	r3, #9
 80010fa:	d010      	beq.n	800111e <HAL_ADC_Start+0x1f2>
 80010fc:	e005      	b.n	800110a <HAL_ADC_Start+0x1de>
 80010fe:	4b14      	ldr	r3, [pc, #80]	@ (8001150 <HAL_ADC_Start+0x224>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f003 031f 	and.w	r3, r3, #31
 8001106:	2b09      	cmp	r3, #9
 8001108:	d009      	beq.n	800111e <HAL_ADC_Start+0x1f2>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001112:	d004      	beq.n	800111e <HAL_ADC_Start+0x1f2>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a0e      	ldr	r2, [pc, #56]	@ (8001154 <HAL_ADC_Start+0x228>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d10f      	bne.n	800113e <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f042 0204 	orr.w	r2, r2, #4
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	e006      	b.n	800113e <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001138:	e001      	b.n	800113e <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800113a:	2302      	movs	r3, #2
 800113c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800113e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	50000100 	.word	0x50000100
 800114c:	50000300 	.word	0x50000300
 8001150:	50000700 	.word	0x50000700
 8001154:	50000400 	.word	0x50000400

08001158 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001160:	2300      	movs	r3, #0
 8001162:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800116a:	2b01      	cmp	r3, #1
 800116c:	d101      	bne.n	8001172 <HAL_ADC_Stop+0x1a>
 800116e:	2302      	movs	r3, #2
 8001170:	e023      	b.n	80011ba <HAL_ADC_Stop+0x62>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2201      	movs	r2, #1
 8001176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800117a:	216c      	movs	r1, #108	@ 0x6c
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f000 fdd7 	bl	8001d30 <ADC_ConversionStop>
 8001182:	4603      	mov	r3, r0
 8001184:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d111      	bne.n	80011b0 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 fd69 	bl	8001c64 <ADC_Disable>
 8001192:	4603      	mov	r3, r0
 8001194:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d109      	bne.n	80011b0 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80011a4:	f023 0301 	bic.w	r3, r3, #1
 80011a8:	f043 0201 	orr.w	r2, r3, #1
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	2b08      	cmp	r3, #8
 80011d8:	d102      	bne.n	80011e0 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80011da:	2308      	movs	r3, #8
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	e03a      	b.n	8001256 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011e8:	d004      	beq.n	80011f4 <HAL_ADC_PollForConversion+0x30>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a72      	ldr	r2, [pc, #456]	@ (80013b8 <HAL_ADC_PollForConversion+0x1f4>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d101      	bne.n	80011f8 <HAL_ADC_PollForConversion+0x34>
 80011f4:	4b71      	ldr	r3, [pc, #452]	@ (80013bc <HAL_ADC_PollForConversion+0x1f8>)
 80011f6:	e000      	b.n	80011fa <HAL_ADC_PollForConversion+0x36>
 80011f8:	4b71      	ldr	r3, [pc, #452]	@ (80013c0 <HAL_ADC_PollForConversion+0x1fc>)
 80011fa:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f003 031f 	and.w	r3, r3, #31
 8001204:	2b00      	cmp	r3, #0
 8001206:	d112      	bne.n	800122e <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	2b01      	cmp	r3, #1
 8001214:	d11d      	bne.n	8001252 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121a:	f043 0220 	orr.w	r2, r3, #32
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e0bf      	b.n	80013ae <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00b      	beq.n	8001252 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123e:	f043 0220 	orr.w	r2, r3, #32
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e0ad      	b.n	80013ae <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001252:	230c      	movs	r3, #12
 8001254:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800125e:	d004      	beq.n	800126a <HAL_ADC_PollForConversion+0xa6>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a54      	ldr	r2, [pc, #336]	@ (80013b8 <HAL_ADC_PollForConversion+0x1f4>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d106      	bne.n	8001278 <HAL_ADC_PollForConversion+0xb4>
 800126a:	4b54      	ldr	r3, [pc, #336]	@ (80013bc <HAL_ADC_PollForConversion+0x1f8>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 031f 	and.w	r3, r3, #31
 8001272:	2b00      	cmp	r3, #0
 8001274:	d010      	beq.n	8001298 <HAL_ADC_PollForConversion+0xd4>
 8001276:	e005      	b.n	8001284 <HAL_ADC_PollForConversion+0xc0>
 8001278:	4b51      	ldr	r3, [pc, #324]	@ (80013c0 <HAL_ADC_PollForConversion+0x1fc>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f003 031f 	and.w	r3, r3, #31
 8001280:	2b00      	cmp	r3, #0
 8001282:	d009      	beq.n	8001298 <HAL_ADC_PollForConversion+0xd4>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800128c:	d004      	beq.n	8001298 <HAL_ADC_PollForConversion+0xd4>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a4c      	ldr	r2, [pc, #304]	@ (80013c4 <HAL_ADC_PollForConversion+0x200>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d104      	bne.n	80012a2 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	e00f      	b.n	80012c2 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012aa:	d004      	beq.n	80012b6 <HAL_ADC_PollForConversion+0xf2>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a41      	ldr	r2, [pc, #260]	@ (80013b8 <HAL_ADC_PollForConversion+0x1f4>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d102      	bne.n	80012bc <HAL_ADC_PollForConversion+0xf8>
 80012b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80012ba:	e000      	b.n	80012be <HAL_ADC_PollForConversion+0xfa>
 80012bc:	4b41      	ldr	r3, [pc, #260]	@ (80013c4 <HAL_ADC_PollForConversion+0x200>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80012c2:	f7ff fc2d 	bl	8000b20 <HAL_GetTick>
 80012c6:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80012c8:	e021      	b.n	800130e <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d0:	d01d      	beq.n	800130e <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d007      	beq.n	80012e8 <HAL_ADC_PollForConversion+0x124>
 80012d8:	f7ff fc22 	bl	8000b20 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d212      	bcs.n	800130e <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	4013      	ands	r3, r2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d10b      	bne.n	800130e <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fa:	f043 0204 	orr.w	r2, r3, #4
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e04f      	b.n	80013ae <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	4013      	ands	r3, r2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d0d6      	beq.n	80012ca <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001320:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001332:	2b00      	cmp	r3, #0
 8001334:	d131      	bne.n	800139a <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800133c:	2b00      	cmp	r3, #0
 800133e:	d12c      	bne.n	800139a <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	2b08      	cmp	r3, #8
 800134c:	d125      	bne.n	800139a <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	2b00      	cmp	r3, #0
 800135a:	d112      	bne.n	8001382 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001360:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d112      	bne.n	800139a <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001378:	f043 0201 	orr.w	r2, r3, #1
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001380:	e00b      	b.n	800139a <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001386:	f043 0220 	orr.w	r2, r3, #32
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001392:	f043 0201 	orr.w	r2, r3, #1
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d103      	bne.n	80013ac <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	50000100 	.word	0x50000100
 80013bc:	50000300 	.word	0x50000300
 80013c0:	50000700 	.word	0x50000700
 80013c4:	50000400 	.word	0x50000400

080013c8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b09b      	sub	sp, #108	@ 0x6c
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d101      	bne.n	8001406 <HAL_ADC_ConfigChannel+0x22>
 8001402:	2302      	movs	r3, #2
 8001404:	e2c8      	b.n	8001998 <HAL_ADC_ConfigChannel+0x5b4>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b00      	cmp	r3, #0
 800141a:	f040 82ac 	bne.w	8001976 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b04      	cmp	r3, #4
 8001424:	d81c      	bhi.n	8001460 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4413      	add	r3, r2
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	461a      	mov	r2, r3
 800143a:	231f      	movs	r3, #31
 800143c:	4093      	lsls	r3, r2
 800143e:	43db      	mvns	r3, r3
 8001440:	4019      	ands	r1, r3
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	6818      	ldr	r0, [r3, #0]
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	4613      	mov	r3, r2
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	4413      	add	r3, r2
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	fa00 f203 	lsl.w	r2, r0, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	631a      	str	r2, [r3, #48]	@ 0x30
 800145e:	e063      	b.n	8001528 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b09      	cmp	r3, #9
 8001466:	d81e      	bhi.n	80014a6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	4613      	mov	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	4413      	add	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	3b1e      	subs	r3, #30
 800147c:	221f      	movs	r2, #31
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	4019      	ands	r1, r3
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	6818      	ldr	r0, [r3, #0]
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4413      	add	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	3b1e      	subs	r3, #30
 8001498:	fa00 f203 	lsl.w	r2, r0, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	430a      	orrs	r2, r1
 80014a2:	635a      	str	r2, [r3, #52]	@ 0x34
 80014a4:	e040      	b.n	8001528 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b0e      	cmp	r3, #14
 80014ac:	d81e      	bhi.n	80014ec <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	4413      	add	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	3b3c      	subs	r3, #60	@ 0x3c
 80014c2:	221f      	movs	r2, #31
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	4019      	ands	r1, r3
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	6818      	ldr	r0, [r3, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	4613      	mov	r3, r2
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	3b3c      	subs	r3, #60	@ 0x3c
 80014de:	fa00 f203 	lsl.w	r2, r0, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	430a      	orrs	r2, r1
 80014e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80014ea:	e01d      	b.n	8001528 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	4613      	mov	r3, r2
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	4413      	add	r3, r2
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	3b5a      	subs	r3, #90	@ 0x5a
 8001500:	221f      	movs	r2, #31
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	4019      	ands	r1, r3
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	6818      	ldr	r0, [r3, #0]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	4613      	mov	r3, r2
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4413      	add	r3, r2
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	3b5a      	subs	r3, #90	@ 0x5a
 800151c:	fa00 f203 	lsl.w	r2, r0, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	430a      	orrs	r2, r1
 8001526:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 030c 	and.w	r3, r3, #12
 8001532:	2b00      	cmp	r3, #0
 8001534:	f040 80e5 	bne.w	8001702 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b09      	cmp	r3, #9
 800153e:	d91c      	bls.n	800157a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6999      	ldr	r1, [r3, #24]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	4613      	mov	r3, r2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	4413      	add	r3, r2
 8001550:	3b1e      	subs	r3, #30
 8001552:	2207      	movs	r2, #7
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	4019      	ands	r1, r3
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	6898      	ldr	r0, [r3, #8]
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4613      	mov	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4413      	add	r3, r2
 800156a:	3b1e      	subs	r3, #30
 800156c:	fa00 f203 	lsl.w	r2, r0, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	430a      	orrs	r2, r1
 8001576:	619a      	str	r2, [r3, #24]
 8001578:	e019      	b.n	80015ae <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6959      	ldr	r1, [r3, #20]
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4613      	mov	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4413      	add	r3, r2
 800158a:	2207      	movs	r2, #7
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	4019      	ands	r1, r3
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	6898      	ldr	r0, [r3, #8]
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4613      	mov	r3, r2
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	4413      	add	r3, r2
 80015a2:	fa00 f203 	lsl.w	r2, r0, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	695a      	ldr	r2, [r3, #20]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	08db      	lsrs	r3, r3, #3
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d84f      	bhi.n	8001670 <HAL_ADC_ConfigChannel+0x28c>
 80015d0:	a201      	add	r2, pc, #4	@ (adr r2, 80015d8 <HAL_ADC_ConfigChannel+0x1f4>)
 80015d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d6:	bf00      	nop
 80015d8:	080015e9 	.word	0x080015e9
 80015dc:	0800160b 	.word	0x0800160b
 80015e0:	0800162d 	.word	0x0800162d
 80015e4:	0800164f 	.word	0x0800164f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80015ee:	4b99      	ldr	r3, [pc, #612]	@ (8001854 <HAL_ADC_ConfigChannel+0x470>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	6812      	ldr	r2, [r2, #0]
 80015f6:	0691      	lsls	r1, r2, #26
 80015f8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80015fa:	430a      	orrs	r2, r1
 80015fc:	431a      	orrs	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001606:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001608:	e07b      	b.n	8001702 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001610:	4b90      	ldr	r3, [pc, #576]	@ (8001854 <HAL_ADC_ConfigChannel+0x470>)
 8001612:	4013      	ands	r3, r2
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	6812      	ldr	r2, [r2, #0]
 8001618:	0691      	lsls	r1, r2, #26
 800161a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800161c:	430a      	orrs	r2, r1
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001628:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800162a:	e06a      	b.n	8001702 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001632:	4b88      	ldr	r3, [pc, #544]	@ (8001854 <HAL_ADC_ConfigChannel+0x470>)
 8001634:	4013      	ands	r3, r2
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	6812      	ldr	r2, [r2, #0]
 800163a:	0691      	lsls	r1, r2, #26
 800163c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800163e:	430a      	orrs	r2, r1
 8001640:	431a      	orrs	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800164a:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800164c:	e059      	b.n	8001702 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001654:	4b7f      	ldr	r3, [pc, #508]	@ (8001854 <HAL_ADC_ConfigChannel+0x470>)
 8001656:	4013      	ands	r3, r2
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	6812      	ldr	r2, [r2, #0]
 800165c:	0691      	lsls	r1, r2, #26
 800165e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001660:	430a      	orrs	r2, r1
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800166c:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800166e:	e048      	b.n	8001702 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001676:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	069b      	lsls	r3, r3, #26
 8001680:	429a      	cmp	r2, r3
 8001682:	d107      	bne.n	8001694 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001692:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800169a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	069b      	lsls	r3, r3, #26
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d107      	bne.n	80016b8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80016b6:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80016be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	069b      	lsls	r3, r3, #26
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d107      	bne.n	80016dc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80016da:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80016e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	069b      	lsls	r3, r3, #26
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d107      	bne.n	8001700 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80016fe:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001700:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	2b01      	cmp	r3, #1
 800170e:	d108      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x33e>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b01      	cmp	r3, #1
 800171c:	d101      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x33e>
 800171e:	2301      	movs	r3, #1
 8001720:	e000      	b.n	8001724 <HAL_ADC_ConfigChannel+0x340>
 8001722:	2300      	movs	r3, #0
 8001724:	2b00      	cmp	r3, #0
 8001726:	f040 8131 	bne.w	800198c <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d00f      	beq.n	8001752 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2201      	movs	r2, #1
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43da      	mvns	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	400a      	ands	r2, r1
 800174c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001750:	e049      	b.n	80017e6 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2201      	movs	r2, #1
 8001760:	409a      	lsls	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	430a      	orrs	r2, r1
 8001768:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b09      	cmp	r3, #9
 8001772:	d91c      	bls.n	80017ae <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6999      	ldr	r1, [r3, #24]
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	4613      	mov	r3, r2
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	4413      	add	r3, r2
 8001784:	3b1b      	subs	r3, #27
 8001786:	2207      	movs	r2, #7
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	4019      	ands	r1, r3
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	6898      	ldr	r0, [r3, #8]
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4613      	mov	r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4413      	add	r3, r2
 800179e:	3b1b      	subs	r3, #27
 80017a0:	fa00 f203 	lsl.w	r2, r0, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	619a      	str	r2, [r3, #24]
 80017ac:	e01b      	b.n	80017e6 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6959      	ldr	r1, [r3, #20]
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	1c5a      	adds	r2, r3, #1
 80017ba:	4613      	mov	r3, r2
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	4413      	add	r3, r2
 80017c0:	2207      	movs	r2, #7
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	4019      	ands	r1, r3
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	6898      	ldr	r0, [r3, #8]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	4613      	mov	r3, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4413      	add	r3, r2
 80017da:	fa00 f203 	lsl.w	r2, r0, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017ee:	d004      	beq.n	80017fa <HAL_ADC_ConfigChannel+0x416>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a18      	ldr	r2, [pc, #96]	@ (8001858 <HAL_ADC_ConfigChannel+0x474>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d101      	bne.n	80017fe <HAL_ADC_ConfigChannel+0x41a>
 80017fa:	4b18      	ldr	r3, [pc, #96]	@ (800185c <HAL_ADC_ConfigChannel+0x478>)
 80017fc:	e000      	b.n	8001800 <HAL_ADC_ConfigChannel+0x41c>
 80017fe:	4b18      	ldr	r3, [pc, #96]	@ (8001860 <HAL_ADC_ConfigChannel+0x47c>)
 8001800:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b10      	cmp	r3, #16
 8001808:	d105      	bne.n	8001816 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800180a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001812:	2b00      	cmp	r3, #0
 8001814:	d015      	beq.n	8001842 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800181a:	2b11      	cmp	r3, #17
 800181c:	d105      	bne.n	800182a <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800181e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00b      	beq.n	8001842 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800182e:	2b12      	cmp	r3, #18
 8001830:	f040 80ac 	bne.w	800198c <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001834:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800183c:	2b00      	cmp	r3, #0
 800183e:	f040 80a5 	bne.w	800198c <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800184a:	d10b      	bne.n	8001864 <HAL_ADC_ConfigChannel+0x480>
 800184c:	4b02      	ldr	r3, [pc, #8]	@ (8001858 <HAL_ADC_ConfigChannel+0x474>)
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	e023      	b.n	800189a <HAL_ADC_ConfigChannel+0x4b6>
 8001852:	bf00      	nop
 8001854:	83fff000 	.word	0x83fff000
 8001858:	50000100 	.word	0x50000100
 800185c:	50000300 	.word	0x50000300
 8001860:	50000700 	.word	0x50000700
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a4e      	ldr	r2, [pc, #312]	@ (80019a4 <HAL_ADC_ConfigChannel+0x5c0>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d103      	bne.n	8001876 <HAL_ADC_ConfigChannel+0x492>
 800186e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	e011      	b.n	800189a <HAL_ADC_ConfigChannel+0x4b6>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a4b      	ldr	r2, [pc, #300]	@ (80019a8 <HAL_ADC_ConfigChannel+0x5c4>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d102      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x4a2>
 8001880:	4b4a      	ldr	r3, [pc, #296]	@ (80019ac <HAL_ADC_ConfigChannel+0x5c8>)
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	e009      	b.n	800189a <HAL_ADC_ConfigChannel+0x4b6>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a48      	ldr	r2, [pc, #288]	@ (80019ac <HAL_ADC_ConfigChannel+0x5c8>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d102      	bne.n	8001896 <HAL_ADC_ConfigChannel+0x4b2>
 8001890:	4b45      	ldr	r3, [pc, #276]	@ (80019a8 <HAL_ADC_ConfigChannel+0x5c4>)
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	e001      	b.n	800189a <HAL_ADC_ConfigChannel+0x4b6>
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 0303 	and.w	r3, r3, #3
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d108      	bne.n	80018ba <HAL_ADC_ConfigChannel+0x4d6>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d101      	bne.n	80018ba <HAL_ADC_ConfigChannel+0x4d6>
 80018b6:	2301      	movs	r3, #1
 80018b8:	e000      	b.n	80018bc <HAL_ADC_ConfigChannel+0x4d8>
 80018ba:	2300      	movs	r3, #0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d150      	bne.n	8001962 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80018c0:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d010      	beq.n	80018e8 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d107      	bne.n	80018e2 <HAL_ADC_ConfigChannel+0x4fe>
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d101      	bne.n	80018e2 <HAL_ADC_ConfigChannel+0x4fe>
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <HAL_ADC_ConfigChannel+0x500>
 80018e2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d13c      	bne.n	8001962 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b10      	cmp	r3, #16
 80018ee:	d11d      	bne.n	800192c <HAL_ADC_ConfigChannel+0x548>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018f8:	d118      	bne.n	800192c <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80018fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001902:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001904:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001906:	4b2a      	ldr	r3, [pc, #168]	@ (80019b0 <HAL_ADC_ConfigChannel+0x5cc>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a2a      	ldr	r2, [pc, #168]	@ (80019b4 <HAL_ADC_ConfigChannel+0x5d0>)
 800190c:	fba2 2303 	umull	r2, r3, r2, r3
 8001910:	0c9a      	lsrs	r2, r3, #18
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800191c:	e002      	b.n	8001924 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	3b01      	subs	r3, #1
 8001922:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f9      	bne.n	800191e <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800192a:	e02e      	b.n	800198a <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b11      	cmp	r3, #17
 8001932:	d10b      	bne.n	800194c <HAL_ADC_ConfigChannel+0x568>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800193c:	d106      	bne.n	800194c <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800193e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001946:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001948:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800194a:	e01e      	b.n	800198a <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b12      	cmp	r3, #18
 8001952:	d11a      	bne.n	800198a <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001954:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800195c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800195e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001960:	e013      	b.n	800198a <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001966:	f043 0220 	orr.w	r2, r3, #32
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001974:	e00a      	b.n	800198c <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197a:	f043 0220 	orr.w	r2, r3, #32
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001988:	e000      	b.n	800198c <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800198a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001994:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001998:	4618      	mov	r0, r3
 800199a:	376c      	adds	r7, #108	@ 0x6c
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	50000100 	.word	0x50000100
 80019a8:	50000400 	.word	0x50000400
 80019ac:	50000500 	.word	0x50000500
 80019b0:	20000000 	.word	0x20000000
 80019b4:	431bde83 	.word	0x431bde83

080019b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b099      	sub	sp, #100	@ 0x64
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019c2:	2300      	movs	r3, #0
 80019c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019d0:	d102      	bne.n	80019d8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80019d2:	4b6d      	ldr	r3, [pc, #436]	@ (8001b88 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	e01a      	b.n	8001a0e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a6a      	ldr	r2, [pc, #424]	@ (8001b88 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d103      	bne.n	80019ea <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80019e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	e011      	b.n	8001a0e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a67      	ldr	r2, [pc, #412]	@ (8001b8c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d102      	bne.n	80019fa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80019f4:	4b66      	ldr	r3, [pc, #408]	@ (8001b90 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	e009      	b.n	8001a0e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a64      	ldr	r2, [pc, #400]	@ (8001b90 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d102      	bne.n	8001a0a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001a04:	4b61      	ldr	r3, [pc, #388]	@ (8001b8c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	e001      	b.n	8001a0e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e0b0      	b.n	8001b7a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d101      	bne.n	8001a26 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001a22:	2302      	movs	r3, #2
 8001a24:	e0a9      	b.n	8001b7a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f040 808d 	bne.w	8001b58 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 0304 	and.w	r3, r3, #4
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f040 8086 	bne.w	8001b58 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a54:	d004      	beq.n	8001a60 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a4b      	ldr	r2, [pc, #300]	@ (8001b88 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d101      	bne.n	8001a64 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001a60:	4b4c      	ldr	r3, [pc, #304]	@ (8001b94 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001a62:	e000      	b.n	8001a66 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001a64:	4b4c      	ldr	r3, [pc, #304]	@ (8001b98 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001a66:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d040      	beq.n	8001af2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001a70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	6859      	ldr	r1, [r3, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a82:	035b      	lsls	r3, r3, #13
 8001a84:	430b      	orrs	r3, r1
 8001a86:	431a      	orrs	r2, r3
 8001a88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a8a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d108      	bne.n	8001aac <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d101      	bne.n	8001aac <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001aac:	2300      	movs	r3, #0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d15c      	bne.n	8001b6c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d107      	bne.n	8001ace <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001ace:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d14b      	bne.n	8001b6c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001ad4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001adc:	f023 030f 	bic.w	r3, r3, #15
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	6811      	ldr	r1, [r2, #0]
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	6892      	ldr	r2, [r2, #8]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	431a      	orrs	r2, r3
 8001aec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001aee:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001af0:	e03c      	b.n	8001b6c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001af2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001afa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001afc:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d108      	bne.n	8001b1e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d101      	bne.n	8001b1e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001b1e:	2300      	movs	r3, #0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d123      	bne.n	8001b6c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d107      	bne.n	8001b40 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d101      	bne.n	8001b40 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e000      	b.n	8001b42 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001b40:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d112      	bne.n	8001b6c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001b46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001b4e:	f023 030f 	bic.w	r3, r3, #15
 8001b52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001b54:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b56:	e009      	b.n	8001b6c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5c:	f043 0220 	orr.w	r2, r3, #32
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001b6a:	e000      	b.n	8001b6e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b6c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001b76:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3764      	adds	r7, #100	@ 0x64
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	50000100 	.word	0x50000100
 8001b8c:	50000400 	.word	0x50000400
 8001b90:	50000500 	.word	0x50000500
 8001b94:	50000300 	.word	0x50000300
 8001b98:	50000700 	.word	0x50000700

08001b9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d108      	bne.n	8001bc8 <ADC_Enable+0x2c>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <ADC_Enable+0x2c>
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e000      	b.n	8001bca <ADC_Enable+0x2e>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d143      	bne.n	8001c56 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	4b22      	ldr	r3, [pc, #136]	@ (8001c60 <ADC_Enable+0xc4>)
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00d      	beq.n	8001bf8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be0:	f043 0210 	orr.w	r2, r3, #16
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bec:	f043 0201 	orr.w	r2, r3, #1
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e02f      	b.n	8001c58 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0201 	orr.w	r2, r2, #1
 8001c06:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001c08:	f7fe ff8a 	bl	8000b20 <HAL_GetTick>
 8001c0c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c0e:	e01b      	b.n	8001c48 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c10:	f7fe ff86 	bl	8000b20 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d914      	bls.n	8001c48 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d00d      	beq.n	8001c48 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c30:	f043 0210 	orr.w	r2, r3, #16
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3c:	f043 0201 	orr.w	r2, r3, #1
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e007      	b.n	8001c58 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d1dc      	bne.n	8001c10 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	8000003f 	.word	0x8000003f

08001c64 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d108      	bne.n	8001c90 <ADC_Disable+0x2c>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <ADC_Disable+0x2c>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <ADC_Disable+0x2e>
 8001c90:	2300      	movs	r3, #0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d047      	beq.n	8001d26 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 030d 	and.w	r3, r3, #13
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d10f      	bne.n	8001cc4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0202 	orr.w	r2, r2, #2
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2203      	movs	r2, #3
 8001cba:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001cbc:	f7fe ff30 	bl	8000b20 <HAL_GetTick>
 8001cc0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001cc2:	e029      	b.n	8001d18 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc8:	f043 0210 	orr.w	r2, r3, #16
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd4:	f043 0201 	orr.w	r2, r3, #1
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e023      	b.n	8001d28 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ce0:	f7fe ff1e 	bl	8000b20 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d914      	bls.n	8001d18 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d10d      	bne.n	8001d18 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d00:	f043 0210 	orr.w	r2, r3, #16
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0c:	f043 0201 	orr.w	r2, r3, #1
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e007      	b.n	8001d28 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d0dc      	beq.n	8001ce0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 030c 	and.w	r3, r3, #12
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 809b 	beq.w	8001e8c <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d64:	d12a      	bne.n	8001dbc <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d126      	bne.n	8001dbc <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d122      	bne.n	8001dbc <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8001d76:	230c      	movs	r3, #12
 8001d78:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001d7a:	e014      	b.n	8001da6 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	4a46      	ldr	r2, [pc, #280]	@ (8001e98 <ADC_ConversionStop+0x168>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d90d      	bls.n	8001da0 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d88:	f043 0210 	orr.w	r2, r3, #16
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d94:	f043 0201 	orr.w	r2, r3, #1
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	645a      	str	r2, [r3, #68]	@ 0x44
          
          return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e076      	b.n	8001e8e <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	3301      	adds	r3, #1
 8001da4:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001db0:	2b40      	cmp	r3, #64	@ 0x40
 8001db2:	d1e3      	bne.n	8001d7c <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2240      	movs	r2, #64	@ 0x40
 8001dba:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	2b60      	cmp	r3, #96	@ 0x60
 8001dc0:	d015      	beq.n	8001dee <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d10e      	bne.n	8001dee <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d107      	bne.n	8001dee <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f042 0210 	orr.w	r2, r2, #16
 8001dec:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	2b0c      	cmp	r3, #12
 8001df2:	d015      	beq.n	8001e20 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d10e      	bne.n	8001e20 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d107      	bne.n	8001e20 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0220 	orr.w	r2, r2, #32
 8001e1e:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	2b60      	cmp	r3, #96	@ 0x60
 8001e24:	d005      	beq.n	8001e32 <ADC_ConversionStop+0x102>
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	2b6c      	cmp	r3, #108	@ 0x6c
 8001e2a:	d105      	bne.n	8001e38 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001e2c:	230c      	movs	r3, #12
 8001e2e:	617b      	str	r3, [r7, #20]
        break;
 8001e30:	e005      	b.n	8001e3e <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001e32:	2308      	movs	r3, #8
 8001e34:	617b      	str	r3, [r7, #20]
        break;
 8001e36:	e002      	b.n	8001e3e <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001e38:	2304      	movs	r3, #4
 8001e3a:	617b      	str	r3, [r7, #20]
        break;
 8001e3c:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001e3e:	f7fe fe6f 	bl	8000b20 <HAL_GetTick>
 8001e42:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001e44:	e01b      	b.n	8001e7e <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001e46:	f7fe fe6b 	bl	8000b20 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b0b      	cmp	r3, #11
 8001e52:	d914      	bls.n	8001e7e <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00d      	beq.n	8001e7e <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	f043 0210 	orr.w	r2, r3, #16
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e72:	f043 0201 	orr.w	r2, r3, #1
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	645a      	str	r2, [r3, #68]	@ 0x44
        
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e007      	b.n	8001e8e <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	4013      	ands	r3, r2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1dc      	bne.n	8001e46 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	000993ff 	.word	0x000993ff

08001e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ec8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ece:	4a04      	ldr	r2, [pc, #16]	@ (8001ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	60d3      	str	r3, [r2, #12]
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee8:	4b04      	ldr	r3, [pc, #16]	@ (8001efc <__NVIC_GetPriorityGrouping+0x18>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	0a1b      	lsrs	r3, r3, #8
 8001eee:	f003 0307 	and.w	r3, r3, #7
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	db0b      	blt.n	8001f2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	f003 021f 	and.w	r2, r3, #31
 8001f18:	4907      	ldr	r1, [pc, #28]	@ (8001f38 <__NVIC_EnableIRQ+0x38>)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	095b      	lsrs	r3, r3, #5
 8001f20:	2001      	movs	r0, #1
 8001f22:	fa00 f202 	lsl.w	r2, r0, r2
 8001f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	e000e100 	.word	0xe000e100

08001f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	6039      	str	r1, [r7, #0]
 8001f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	db0a      	blt.n	8001f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	490c      	ldr	r1, [pc, #48]	@ (8001f88 <__NVIC_SetPriority+0x4c>)
 8001f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5a:	0112      	lsls	r2, r2, #4
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	440b      	add	r3, r1
 8001f60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f64:	e00a      	b.n	8001f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	4908      	ldr	r1, [pc, #32]	@ (8001f8c <__NVIC_SetPriority+0x50>)
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	3b04      	subs	r3, #4
 8001f74:	0112      	lsls	r2, r2, #4
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	440b      	add	r3, r1
 8001f7a:	761a      	strb	r2, [r3, #24]
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	e000e100 	.word	0xe000e100
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b089      	sub	sp, #36	@ 0x24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f1c3 0307 	rsb	r3, r3, #7
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	bf28      	it	cs
 8001fae:	2304      	movcs	r3, #4
 8001fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	2b06      	cmp	r3, #6
 8001fb8:	d902      	bls.n	8001fc0 <NVIC_EncodePriority+0x30>
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	3b03      	subs	r3, #3
 8001fbe:	e000      	b.n	8001fc2 <NVIC_EncodePriority+0x32>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43da      	mvns	r2, r3
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	401a      	ands	r2, r3
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe2:	43d9      	mvns	r1, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe8:	4313      	orrs	r3, r2
         );
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3724      	adds	r7, #36	@ 0x24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
	...

08001ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3b01      	subs	r3, #1
 8002004:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002008:	d301      	bcc.n	800200e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800200a:	2301      	movs	r3, #1
 800200c:	e00f      	b.n	800202e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800200e:	4a0a      	ldr	r2, [pc, #40]	@ (8002038 <SysTick_Config+0x40>)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3b01      	subs	r3, #1
 8002014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002016:	210f      	movs	r1, #15
 8002018:	f04f 30ff 	mov.w	r0, #4294967295
 800201c:	f7ff ff8e 	bl	8001f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002020:	4b05      	ldr	r3, [pc, #20]	@ (8002038 <SysTick_Config+0x40>)
 8002022:	2200      	movs	r2, #0
 8002024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002026:	4b04      	ldr	r3, [pc, #16]	@ (8002038 <SysTick_Config+0x40>)
 8002028:	2207      	movs	r2, #7
 800202a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	e000e010 	.word	0xe000e010

0800203c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff ff29 	bl	8001e9c <__NVIC_SetPriorityGrouping>
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b086      	sub	sp, #24
 8002056:	af00      	add	r7, sp, #0
 8002058:	4603      	mov	r3, r0
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
 800205e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002064:	f7ff ff3e 	bl	8001ee4 <__NVIC_GetPriorityGrouping>
 8002068:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	6978      	ldr	r0, [r7, #20]
 8002070:	f7ff ff8e 	bl	8001f90 <NVIC_EncodePriority>
 8002074:	4602      	mov	r2, r0
 8002076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800207a:	4611      	mov	r1, r2
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff ff5d 	bl	8001f3c <__NVIC_SetPriority>
}
 8002082:	bf00      	nop
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	4603      	mov	r3, r0
 8002092:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ff31 	bl	8001f00 <__NVIC_EnableIRQ>
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff ffa2 	bl	8001ff8 <SysTick_Config>
 80020b4:	4603      	mov	r3, r0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e02e      	b.n	800212e <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d008      	beq.n	80020ec <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2204      	movs	r2, #4
 80020de:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e020      	b.n	800212e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 020e 	bic.w	r2, r2, #14
 80020fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0201 	bic.w	r2, r2, #1
 800210a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002114:	2101      	movs	r1, #1
 8002116:	fa01 f202 	lsl.w	r2, r1, r2
 800211a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b084      	sub	sp, #16
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002142:	2300      	movs	r3, #0
 8002144:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800214c:	2b02      	cmp	r3, #2
 800214e:	d005      	beq.n	800215c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2204      	movs	r2, #4
 8002154:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	73fb      	strb	r3, [r7, #15]
 800215a:	e027      	b.n	80021ac <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 020e 	bic.w	r2, r2, #14
 800216a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0201 	bic.w	r2, r2, #1
 800217a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002184:	2101      	movs	r1, #1
 8002186:	fa01 f202 	lsl.w	r2, r1, r2
 800218a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	4798      	blx	r3
    }
  }
  return status;
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021c6:	e160      	b.n	800248a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	2101      	movs	r1, #1
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	fa01 f303 	lsl.w	r3, r1, r3
 80021d4:	4013      	ands	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 8152 	beq.w	8002484 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d005      	beq.n	80021f8 <HAL_GPIO_Init+0x40>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d130      	bne.n	800225a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	2203      	movs	r2, #3
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4013      	ands	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	4313      	orrs	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800222e:	2201      	movs	r2, #1
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4013      	ands	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	091b      	lsrs	r3, r3, #4
 8002244:	f003 0201 	and.w	r2, r3, #1
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b03      	cmp	r3, #3
 8002264:	d017      	beq.n	8002296 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	2203      	movs	r2, #3
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	4013      	ands	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d123      	bne.n	80022ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	08da      	lsrs	r2, r3, #3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3208      	adds	r2, #8
 80022aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	220f      	movs	r2, #15
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	4013      	ands	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	691a      	ldr	r2, [r3, #16]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	08da      	lsrs	r2, r3, #3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3208      	adds	r2, #8
 80022e4:	6939      	ldr	r1, [r7, #16]
 80022e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	2203      	movs	r2, #3
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	4013      	ands	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 0203 	and.w	r2, r3, #3
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 80ac 	beq.w	8002484 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800232c:	4b5e      	ldr	r3, [pc, #376]	@ (80024a8 <HAL_GPIO_Init+0x2f0>)
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	4a5d      	ldr	r2, [pc, #372]	@ (80024a8 <HAL_GPIO_Init+0x2f0>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	6193      	str	r3, [r2, #24]
 8002338:	4b5b      	ldr	r3, [pc, #364]	@ (80024a8 <HAL_GPIO_Init+0x2f0>)
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002344:	4a59      	ldr	r2, [pc, #356]	@ (80024ac <HAL_GPIO_Init+0x2f4>)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	089b      	lsrs	r3, r3, #2
 800234a:	3302      	adds	r3, #2
 800234c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002350:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	220f      	movs	r2, #15
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4013      	ands	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800236e:	d025      	beq.n	80023bc <HAL_GPIO_Init+0x204>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a4f      	ldr	r2, [pc, #316]	@ (80024b0 <HAL_GPIO_Init+0x2f8>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d01f      	beq.n	80023b8 <HAL_GPIO_Init+0x200>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a4e      	ldr	r2, [pc, #312]	@ (80024b4 <HAL_GPIO_Init+0x2fc>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d019      	beq.n	80023b4 <HAL_GPIO_Init+0x1fc>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a4d      	ldr	r2, [pc, #308]	@ (80024b8 <HAL_GPIO_Init+0x300>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d013      	beq.n	80023b0 <HAL_GPIO_Init+0x1f8>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a4c      	ldr	r2, [pc, #304]	@ (80024bc <HAL_GPIO_Init+0x304>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d00d      	beq.n	80023ac <HAL_GPIO_Init+0x1f4>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a4b      	ldr	r2, [pc, #300]	@ (80024c0 <HAL_GPIO_Init+0x308>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d007      	beq.n	80023a8 <HAL_GPIO_Init+0x1f0>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a4a      	ldr	r2, [pc, #296]	@ (80024c4 <HAL_GPIO_Init+0x30c>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d101      	bne.n	80023a4 <HAL_GPIO_Init+0x1ec>
 80023a0:	2306      	movs	r3, #6
 80023a2:	e00c      	b.n	80023be <HAL_GPIO_Init+0x206>
 80023a4:	2307      	movs	r3, #7
 80023a6:	e00a      	b.n	80023be <HAL_GPIO_Init+0x206>
 80023a8:	2305      	movs	r3, #5
 80023aa:	e008      	b.n	80023be <HAL_GPIO_Init+0x206>
 80023ac:	2304      	movs	r3, #4
 80023ae:	e006      	b.n	80023be <HAL_GPIO_Init+0x206>
 80023b0:	2303      	movs	r3, #3
 80023b2:	e004      	b.n	80023be <HAL_GPIO_Init+0x206>
 80023b4:	2302      	movs	r3, #2
 80023b6:	e002      	b.n	80023be <HAL_GPIO_Init+0x206>
 80023b8:	2301      	movs	r3, #1
 80023ba:	e000      	b.n	80023be <HAL_GPIO_Init+0x206>
 80023bc:	2300      	movs	r3, #0
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	f002 0203 	and.w	r2, r2, #3
 80023c4:	0092      	lsls	r2, r2, #2
 80023c6:	4093      	lsls	r3, r2
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023ce:	4937      	ldr	r1, [pc, #220]	@ (80024ac <HAL_GPIO_Init+0x2f4>)
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	089b      	lsrs	r3, r3, #2
 80023d4:	3302      	adds	r3, #2
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023dc:	4b3a      	ldr	r3, [pc, #232]	@ (80024c8 <HAL_GPIO_Init+0x310>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	43db      	mvns	r3, r3
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4013      	ands	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002400:	4a31      	ldr	r2, [pc, #196]	@ (80024c8 <HAL_GPIO_Init+0x310>)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002406:	4b30      	ldr	r3, [pc, #192]	@ (80024c8 <HAL_GPIO_Init+0x310>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	43db      	mvns	r3, r3
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4013      	ands	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4313      	orrs	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800242a:	4a27      	ldr	r2, [pc, #156]	@ (80024c8 <HAL_GPIO_Init+0x310>)
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002430:	4b25      	ldr	r3, [pc, #148]	@ (80024c8 <HAL_GPIO_Init+0x310>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	43db      	mvns	r3, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4013      	ands	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002454:	4a1c      	ldr	r2, [pc, #112]	@ (80024c8 <HAL_GPIO_Init+0x310>)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800245a:	4b1b      	ldr	r3, [pc, #108]	@ (80024c8 <HAL_GPIO_Init+0x310>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	43db      	mvns	r3, r3
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	4013      	ands	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4313      	orrs	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800247e:	4a12      	ldr	r2, [pc, #72]	@ (80024c8 <HAL_GPIO_Init+0x310>)
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	3301      	adds	r3, #1
 8002488:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	fa22 f303 	lsr.w	r3, r2, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	f47f ae97 	bne.w	80021c8 <HAL_GPIO_Init+0x10>
  }
}
 800249a:	bf00      	nop
 800249c:	bf00      	nop
 800249e:	371c      	adds	r7, #28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	40021000 	.word	0x40021000
 80024ac:	40010000 	.word	0x40010000
 80024b0:	48000400 	.word	0x48000400
 80024b4:	48000800 	.word	0x48000800
 80024b8:	48000c00 	.word	0x48000c00
 80024bc:	48001000 	.word	0x48001000
 80024c0:	48001400 	.word	0x48001400
 80024c4:	48001800 	.word	0x48001800
 80024c8:	40010400 	.word	0x40010400

080024cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024d8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024dc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d102      	bne.n	80024f2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	f001 b83a 	b.w	8003566 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024f6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 816f 	beq.w	80027e6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002508:	4bb5      	ldr	r3, [pc, #724]	@ (80027e0 <HAL_RCC_OscConfig+0x314>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 030c 	and.w	r3, r3, #12
 8002510:	2b04      	cmp	r3, #4
 8002512:	d00c      	beq.n	800252e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002514:	4bb2      	ldr	r3, [pc, #712]	@ (80027e0 <HAL_RCC_OscConfig+0x314>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 030c 	and.w	r3, r3, #12
 800251c:	2b08      	cmp	r3, #8
 800251e:	d15c      	bne.n	80025da <HAL_RCC_OscConfig+0x10e>
 8002520:	4baf      	ldr	r3, [pc, #700]	@ (80027e0 <HAL_RCC_OscConfig+0x314>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800252c:	d155      	bne.n	80025da <HAL_RCC_OscConfig+0x10e>
 800252e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002532:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800253a:	fa93 f3a3 	rbit	r3, r3
 800253e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002542:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002546:	fab3 f383 	clz	r3, r3
 800254a:	b2db      	uxtb	r3, r3
 800254c:	095b      	lsrs	r3, r3, #5
 800254e:	b2db      	uxtb	r3, r3
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b01      	cmp	r3, #1
 8002558:	d102      	bne.n	8002560 <HAL_RCC_OscConfig+0x94>
 800255a:	4ba1      	ldr	r3, [pc, #644]	@ (80027e0 <HAL_RCC_OscConfig+0x314>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	e015      	b.n	800258c <HAL_RCC_OscConfig+0xc0>
 8002560:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002564:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002568:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800256c:	fa93 f3a3 	rbit	r3, r3
 8002570:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8002574:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002578:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800257c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8002580:	fa93 f3a3 	rbit	r3, r3
 8002584:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002588:	4b95      	ldr	r3, [pc, #596]	@ (80027e0 <HAL_RCC_OscConfig+0x314>)
 800258a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002590:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8002594:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8002598:	fa92 f2a2 	rbit	r2, r2
 800259c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80025a0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80025a4:	fab2 f282 	clz	r2, r2
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	f042 0220 	orr.w	r2, r2, #32
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	f002 021f 	and.w	r2, r2, #31
 80025b4:	2101      	movs	r1, #1
 80025b6:	fa01 f202 	lsl.w	r2, r1, r2
 80025ba:	4013      	ands	r3, r2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 8111 	beq.w	80027e4 <HAL_RCC_OscConfig+0x318>
 80025c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025c6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f040 8108 	bne.w	80027e4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	f000 bfc6 	b.w	8003566 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025de:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025ea:	d106      	bne.n	80025fa <HAL_RCC_OscConfig+0x12e>
 80025ec:	4b7c      	ldr	r3, [pc, #496]	@ (80027e0 <HAL_RCC_OscConfig+0x314>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a7b      	ldr	r2, [pc, #492]	@ (80027e0 <HAL_RCC_OscConfig+0x314>)
 80025f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	e036      	b.n	8002668 <HAL_RCC_OscConfig+0x19c>
 80025fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025fe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10c      	bne.n	8002624 <HAL_RCC_OscConfig+0x158>
 800260a:	4b75      	ldr	r3, [pc, #468]	@ (80027e0 <HAL_RCC_OscConfig+0x314>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a74      	ldr	r2, [pc, #464]	@ (80027e0 <HAL_RCC_OscConfig+0x314>)
 8002610:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	4b72      	ldr	r3, [pc, #456]	@ (80027e0 <HAL_RCC_OscConfig+0x314>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a71      	ldr	r2, [pc, #452]	@ (80027e0 <HAL_RCC_OscConfig+0x314>)
 800261c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	e021      	b.n	8002668 <HAL_RCC_OscConfig+0x19c>
 8002624:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002628:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002634:	d10c      	bne.n	8002650 <HAL_RCC_OscConfig+0x184>
 8002636:	4b6a      	ldr	r3, [pc, #424]	@ (80027e0 <HAL_RCC_OscConfig+0x314>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a69      	ldr	r2, [pc, #420]	@ (80027e0 <HAL_RCC_OscConfig+0x314>)
 800263c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	4b67      	ldr	r3, [pc, #412]	@ (80027e0 <HAL_RCC_OscConfig+0x314>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a66      	ldr	r2, [pc, #408]	@ (80027e0 <HAL_RCC_OscConfig+0x314>)
 8002648:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	e00b      	b.n	8002668 <HAL_RCC_OscConfig+0x19c>
 8002650:	4b63      	ldr	r3, [pc, #396]	@ (80027e0 <HAL_RCC_OscConfig+0x314>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a62      	ldr	r2, [pc, #392]	@ (80027e0 <HAL_RCC_OscConfig+0x314>)
 8002656:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800265a:	6013      	str	r3, [r2, #0]
 800265c:	4b60      	ldr	r3, [pc, #384]	@ (80027e0 <HAL_RCC_OscConfig+0x314>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a5f      	ldr	r2, [pc, #380]	@ (80027e0 <HAL_RCC_OscConfig+0x314>)
 8002662:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002666:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002668:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800266c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d059      	beq.n	800272c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002678:	f7fe fa52 	bl	8000b20 <HAL_GetTick>
 800267c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002680:	e00a      	b.n	8002698 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002682:	f7fe fa4d 	bl	8000b20 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b64      	cmp	r3, #100	@ 0x64
 8002690:	d902      	bls.n	8002698 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	f000 bf67 	b.w	8003566 <HAL_RCC_OscConfig+0x109a>
 8002698:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800269c:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80026a4:	fa93 f3a3 	rbit	r3, r3
 80026a8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80026ac:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b0:	fab3 f383 	clz	r3, r3
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	095b      	lsrs	r3, r3, #5
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d102      	bne.n	80026ca <HAL_RCC_OscConfig+0x1fe>
 80026c4:	4b46      	ldr	r3, [pc, #280]	@ (80027e0 <HAL_RCC_OscConfig+0x314>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	e015      	b.n	80026f6 <HAL_RCC_OscConfig+0x22a>
 80026ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026ce:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80026d6:	fa93 f3a3 	rbit	r3, r3
 80026da:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80026de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026e2:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80026e6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80026ea:	fa93 f3a3 	rbit	r3, r3
 80026ee:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80026f2:	4b3b      	ldr	r3, [pc, #236]	@ (80027e0 <HAL_RCC_OscConfig+0x314>)
 80026f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80026fa:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80026fe:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8002702:	fa92 f2a2 	rbit	r2, r2
 8002706:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800270a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800270e:	fab2 f282 	clz	r2, r2
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	f042 0220 	orr.w	r2, r2, #32
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	f002 021f 	and.w	r2, r2, #31
 800271e:	2101      	movs	r1, #1
 8002720:	fa01 f202 	lsl.w	r2, r1, r2
 8002724:	4013      	ands	r3, r2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0ab      	beq.n	8002682 <HAL_RCC_OscConfig+0x1b6>
 800272a:	e05c      	b.n	80027e6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272c:	f7fe f9f8 	bl	8000b20 <HAL_GetTick>
 8002730:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002734:	e00a      	b.n	800274c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002736:	f7fe f9f3 	bl	8000b20 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b64      	cmp	r3, #100	@ 0x64
 8002744:	d902      	bls.n	800274c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	f000 bf0d 	b.w	8003566 <HAL_RCC_OscConfig+0x109a>
 800274c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002750:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002754:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002758:	fa93 f3a3 	rbit	r3, r3
 800275c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002760:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002764:	fab3 f383 	clz	r3, r3
 8002768:	b2db      	uxtb	r3, r3
 800276a:	095b      	lsrs	r3, r3, #5
 800276c:	b2db      	uxtb	r3, r3
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b01      	cmp	r3, #1
 8002776:	d102      	bne.n	800277e <HAL_RCC_OscConfig+0x2b2>
 8002778:	4b19      	ldr	r3, [pc, #100]	@ (80027e0 <HAL_RCC_OscConfig+0x314>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	e015      	b.n	80027aa <HAL_RCC_OscConfig+0x2de>
 800277e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002782:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002786:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800278a:	fa93 f3a3 	rbit	r3, r3
 800278e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002792:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002796:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800279a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800279e:	fa93 f3a3 	rbit	r3, r3
 80027a2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80027a6:	4b0e      	ldr	r3, [pc, #56]	@ (80027e0 <HAL_RCC_OscConfig+0x314>)
 80027a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027aa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80027ae:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80027b2:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80027b6:	fa92 f2a2 	rbit	r2, r2
 80027ba:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80027be:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80027c2:	fab2 f282 	clz	r2, r2
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	f042 0220 	orr.w	r2, r2, #32
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	f002 021f 	and.w	r2, r2, #31
 80027d2:	2101      	movs	r1, #1
 80027d4:	fa01 f202 	lsl.w	r2, r1, r2
 80027d8:	4013      	ands	r3, r2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1ab      	bne.n	8002736 <HAL_RCC_OscConfig+0x26a>
 80027de:	e002      	b.n	80027e6 <HAL_RCC_OscConfig+0x31a>
 80027e0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027ea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 817f 	beq.w	8002afa <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80027fc:	4ba7      	ldr	r3, [pc, #668]	@ (8002a9c <HAL_RCC_OscConfig+0x5d0>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 030c 	and.w	r3, r3, #12
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00c      	beq.n	8002822 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002808:	4ba4      	ldr	r3, [pc, #656]	@ (8002a9c <HAL_RCC_OscConfig+0x5d0>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 030c 	and.w	r3, r3, #12
 8002810:	2b08      	cmp	r3, #8
 8002812:	d173      	bne.n	80028fc <HAL_RCC_OscConfig+0x430>
 8002814:	4ba1      	ldr	r3, [pc, #644]	@ (8002a9c <HAL_RCC_OscConfig+0x5d0>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800281c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002820:	d16c      	bne.n	80028fc <HAL_RCC_OscConfig+0x430>
 8002822:	2302      	movs	r3, #2
 8002824:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800282c:	fa93 f3a3 	rbit	r3, r3
 8002830:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002834:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002838:	fab3 f383 	clz	r3, r3
 800283c:	b2db      	uxtb	r3, r3
 800283e:	095b      	lsrs	r3, r3, #5
 8002840:	b2db      	uxtb	r3, r3
 8002842:	f043 0301 	orr.w	r3, r3, #1
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b01      	cmp	r3, #1
 800284a:	d102      	bne.n	8002852 <HAL_RCC_OscConfig+0x386>
 800284c:	4b93      	ldr	r3, [pc, #588]	@ (8002a9c <HAL_RCC_OscConfig+0x5d0>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	e013      	b.n	800287a <HAL_RCC_OscConfig+0x3ae>
 8002852:	2302      	movs	r3, #2
 8002854:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800285c:	fa93 f3a3 	rbit	r3, r3
 8002860:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8002864:	2302      	movs	r3, #2
 8002866:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800286a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800286e:	fa93 f3a3 	rbit	r3, r3
 8002872:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002876:	4b89      	ldr	r3, [pc, #548]	@ (8002a9c <HAL_RCC_OscConfig+0x5d0>)
 8002878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287a:	2202      	movs	r2, #2
 800287c:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8002880:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8002884:	fa92 f2a2 	rbit	r2, r2
 8002888:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 800288c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002890:	fab2 f282 	clz	r2, r2
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	f042 0220 	orr.w	r2, r2, #32
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	f002 021f 	and.w	r2, r2, #31
 80028a0:	2101      	movs	r1, #1
 80028a2:	fa01 f202 	lsl.w	r2, r1, r2
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00a      	beq.n	80028c2 <HAL_RCC_OscConfig+0x3f6>
 80028ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028b0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d002      	beq.n	80028c2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	f000 be52 	b.w	8003566 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c2:	4b76      	ldr	r3, [pc, #472]	@ (8002a9c <HAL_RCC_OscConfig+0x5d0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	21f8      	movs	r1, #248	@ 0xf8
 80028d8:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028dc:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80028e0:	fa91 f1a1 	rbit	r1, r1
 80028e4:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80028e8:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80028ec:	fab1 f181 	clz	r1, r1
 80028f0:	b2c9      	uxtb	r1, r1
 80028f2:	408b      	lsls	r3, r1
 80028f4:	4969      	ldr	r1, [pc, #420]	@ (8002a9c <HAL_RCC_OscConfig+0x5d0>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028fa:	e0fe      	b.n	8002afa <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002900:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 8088 	beq.w	8002a1e <HAL_RCC_OscConfig+0x552>
 800290e:	2301      	movs	r3, #1
 8002910:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002914:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002918:	fa93 f3a3 	rbit	r3, r3
 800291c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8002920:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002924:	fab3 f383 	clz	r3, r3
 8002928:	b2db      	uxtb	r3, r3
 800292a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800292e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	461a      	mov	r2, r3
 8002936:	2301      	movs	r3, #1
 8002938:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293a:	f7fe f8f1 	bl	8000b20 <HAL_GetTick>
 800293e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002942:	e00a      	b.n	800295a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002944:	f7fe f8ec 	bl	8000b20 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d902      	bls.n	800295a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	f000 be06 	b.w	8003566 <HAL_RCC_OscConfig+0x109a>
 800295a:	2302      	movs	r3, #2
 800295c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002964:	fa93 f3a3 	rbit	r3, r3
 8002968:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800296c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002970:	fab3 f383 	clz	r3, r3
 8002974:	b2db      	uxtb	r3, r3
 8002976:	095b      	lsrs	r3, r3, #5
 8002978:	b2db      	uxtb	r3, r3
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b01      	cmp	r3, #1
 8002982:	d102      	bne.n	800298a <HAL_RCC_OscConfig+0x4be>
 8002984:	4b45      	ldr	r3, [pc, #276]	@ (8002a9c <HAL_RCC_OscConfig+0x5d0>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	e013      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e6>
 800298a:	2302      	movs	r3, #2
 800298c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002990:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002994:	fa93 f3a3 	rbit	r3, r3
 8002998:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800299c:	2302      	movs	r3, #2
 800299e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80029a2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80029a6:	fa93 f3a3 	rbit	r3, r3
 80029aa:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80029ae:	4b3b      	ldr	r3, [pc, #236]	@ (8002a9c <HAL_RCC_OscConfig+0x5d0>)
 80029b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b2:	2202      	movs	r2, #2
 80029b4:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80029b8:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80029bc:	fa92 f2a2 	rbit	r2, r2
 80029c0:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80029c4:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80029c8:	fab2 f282 	clz	r2, r2
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	f042 0220 	orr.w	r2, r2, #32
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	f002 021f 	and.w	r2, r2, #31
 80029d8:	2101      	movs	r1, #1
 80029da:	fa01 f202 	lsl.w	r2, r1, r2
 80029de:	4013      	ands	r3, r2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0af      	beq.n	8002944 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e4:	4b2d      	ldr	r3, [pc, #180]	@ (8002a9c <HAL_RCC_OscConfig+0x5d0>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029f0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	21f8      	movs	r1, #248	@ 0xf8
 80029fa:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fe:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8002a02:	fa91 f1a1 	rbit	r1, r1
 8002a06:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8002a0a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002a0e:	fab1 f181 	clz	r1, r1
 8002a12:	b2c9      	uxtb	r1, r1
 8002a14:	408b      	lsls	r3, r1
 8002a16:	4921      	ldr	r1, [pc, #132]	@ (8002a9c <HAL_RCC_OscConfig+0x5d0>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	600b      	str	r3, [r1, #0]
 8002a1c:	e06d      	b.n	8002afa <HAL_RCC_OscConfig+0x62e>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a24:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002a28:	fa93 f3a3 	rbit	r3, r3
 8002a2c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8002a30:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a34:	fab3 f383 	clz	r3, r3
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a3e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	461a      	mov	r2, r3
 8002a46:	2300      	movs	r3, #0
 8002a48:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4a:	f7fe f869 	bl	8000b20 <HAL_GetTick>
 8002a4e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a52:	e00a      	b.n	8002a6a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a54:	f7fe f864 	bl	8000b20 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d902      	bls.n	8002a6a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	f000 bd7e 	b.w	8003566 <HAL_RCC_OscConfig+0x109a>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a70:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002a74:	fa93 f3a3 	rbit	r3, r3
 8002a78:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002a7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a80:	fab3 f383 	clz	r3, r3
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d105      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x5d4>
 8002a94:	4b01      	ldr	r3, [pc, #4]	@ (8002a9c <HAL_RCC_OscConfig+0x5d0>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	e016      	b.n	8002ac8 <HAL_RCC_OscConfig+0x5fc>
 8002a9a:	bf00      	nop
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002ab8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002abc:	fa93 f3a3 	rbit	r3, r3
 8002ac0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002ac4:	4bbf      	ldr	r3, [pc, #764]	@ (8002dc4 <HAL_RCC_OscConfig+0x8f8>)
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac8:	2202      	movs	r2, #2
 8002aca:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002ace:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002ad2:	fa92 f2a2 	rbit	r2, r2
 8002ad6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8002ada:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002ade:	fab2 f282 	clz	r2, r2
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	f042 0220 	orr.w	r2, r2, #32
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	f002 021f 	and.w	r2, r2, #31
 8002aee:	2101      	movs	r1, #1
 8002af0:	fa01 f202 	lsl.w	r2, r1, r2
 8002af4:	4013      	ands	r3, r2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1ac      	bne.n	8002a54 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002afa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002afe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 8113 	beq.w	8002d36 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b14:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d07c      	beq.n	8002c1a <HAL_RCC_OscConfig+0x74e>
 8002b20:	2301      	movs	r3, #1
 8002b22:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8002b32:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b36:	fab3 f383 	clz	r3, r3
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4ba2      	ldr	r3, [pc, #648]	@ (8002dc8 <HAL_RCC_OscConfig+0x8fc>)
 8002b40:	4413      	add	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	461a      	mov	r2, r3
 8002b46:	2301      	movs	r3, #1
 8002b48:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4a:	f7fd ffe9 	bl	8000b20 <HAL_GetTick>
 8002b4e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b52:	e00a      	b.n	8002b6a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b54:	f7fd ffe4 	bl	8000b20 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d902      	bls.n	8002b6a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	f000 bcfe 	b.w	8003566 <HAL_RCC_OscConfig+0x109a>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b74:	fa93 f2a3 	rbit	r2, r3
 8002b78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b7c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	fa93 f2a3 	rbit	r2, r3
 8002b9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ba0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002baa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002bae:	2202      	movs	r2, #2
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bb6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	fa93 f2a3 	rbit	r2, r3
 8002bc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bc4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002bc8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bca:	4b7e      	ldr	r3, [pc, #504]	@ (8002dc4 <HAL_RCC_OscConfig+0x8f8>)
 8002bcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bd2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002bd6:	2102      	movs	r1, #2
 8002bd8:	6019      	str	r1, [r3, #0]
 8002bda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bde:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	fa93 f1a3 	rbit	r1, r3
 8002be8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bec:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002bf0:	6019      	str	r1, [r3, #0]
  return result;
 8002bf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bf6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	fab3 f383 	clz	r3, r3
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	f003 031f 	and.w	r3, r3, #31
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c12:	4013      	ands	r3, r2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d09d      	beq.n	8002b54 <HAL_RCC_OscConfig+0x688>
 8002c18:	e08d      	b.n	8002d36 <HAL_RCC_OscConfig+0x86a>
 8002c1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c1e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002c22:	2201      	movs	r2, #1
 8002c24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c2a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	fa93 f2a3 	rbit	r2, r3
 8002c34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c38:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002c3c:	601a      	str	r2, [r3, #0]
  return result;
 8002c3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c42:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002c46:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c48:	fab3 f383 	clz	r3, r3
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	461a      	mov	r2, r3
 8002c50:	4b5d      	ldr	r3, [pc, #372]	@ (8002dc8 <HAL_RCC_OscConfig+0x8fc>)
 8002c52:	4413      	add	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	461a      	mov	r2, r3
 8002c58:	2300      	movs	r3, #0
 8002c5a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5c:	f7fd ff60 	bl	8000b20 <HAL_GetTick>
 8002c60:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c64:	e00a      	b.n	8002c7c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c66:	f7fd ff5b 	bl	8000b20 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d902      	bls.n	8002c7c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	f000 bc75 	b.w	8003566 <HAL_RCC_OscConfig+0x109a>
 8002c7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c80:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002c84:	2202      	movs	r2, #2
 8002c86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c8c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	fa93 f2a3 	rbit	r2, r3
 8002c96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c9a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ca4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002ca8:	2202      	movs	r2, #2
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cb0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	fa93 f2a3 	rbit	r2, r3
 8002cba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cbe:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cc8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002ccc:	2202      	movs	r2, #2
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cd4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	fa93 f2a3 	rbit	r2, r3
 8002cde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ce2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002ce6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ce8:	4b36      	ldr	r3, [pc, #216]	@ (8002dc4 <HAL_RCC_OscConfig+0x8f8>)
 8002cea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cf0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cf4:	2102      	movs	r1, #2
 8002cf6:	6019      	str	r1, [r3, #0]
 8002cf8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cfc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	fa93 f1a3 	rbit	r1, r3
 8002d06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d0a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002d0e:	6019      	str	r1, [r3, #0]
  return result;
 8002d10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d14:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	fab3 f383 	clz	r3, r3
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	f003 031f 	and.w	r3, r3, #31
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d30:	4013      	ands	r3, r2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d197      	bne.n	8002c66 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d3a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0304 	and.w	r3, r3, #4
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 81a5 	beq.w	8003096 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d52:	4b1c      	ldr	r3, [pc, #112]	@ (8002dc4 <HAL_RCC_OscConfig+0x8f8>)
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d116      	bne.n	8002d8c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d5e:	4b19      	ldr	r3, [pc, #100]	@ (8002dc4 <HAL_RCC_OscConfig+0x8f8>)
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	4a18      	ldr	r2, [pc, #96]	@ (8002dc4 <HAL_RCC_OscConfig+0x8f8>)
 8002d64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d68:	61d3      	str	r3, [r2, #28]
 8002d6a:	4b16      	ldr	r3, [pc, #88]	@ (8002dc4 <HAL_RCC_OscConfig+0x8f8>)
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002d72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d80:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d84:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002d86:	2301      	movs	r3, #1
 8002d88:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002dcc <HAL_RCC_OscConfig+0x900>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d121      	bne.n	8002ddc <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d98:	4b0c      	ldr	r3, [pc, #48]	@ (8002dcc <HAL_RCC_OscConfig+0x900>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a0b      	ldr	r2, [pc, #44]	@ (8002dcc <HAL_RCC_OscConfig+0x900>)
 8002d9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002da2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002da4:	f7fd febc 	bl	8000b20 <HAL_GetTick>
 8002da8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dac:	e010      	b.n	8002dd0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dae:	f7fd feb7 	bl	8000b20 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b64      	cmp	r3, #100	@ 0x64
 8002dbc:	d908      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e3d1      	b.n	8003566 <HAL_RCC_OscConfig+0x109a>
 8002dc2:	bf00      	nop
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	10908120 	.word	0x10908120
 8002dcc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd0:	4b8d      	ldr	r3, [pc, #564]	@ (8003008 <HAL_RCC_OscConfig+0xb3c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0e8      	beq.n	8002dae <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ddc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002de0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d106      	bne.n	8002dfa <HAL_RCC_OscConfig+0x92e>
 8002dec:	4b87      	ldr	r3, [pc, #540]	@ (800300c <HAL_RCC_OscConfig+0xb40>)
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	4a86      	ldr	r2, [pc, #536]	@ (800300c <HAL_RCC_OscConfig+0xb40>)
 8002df2:	f043 0301 	orr.w	r3, r3, #1
 8002df6:	6213      	str	r3, [r2, #32]
 8002df8:	e035      	b.n	8002e66 <HAL_RCC_OscConfig+0x99a>
 8002dfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dfe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10c      	bne.n	8002e24 <HAL_RCC_OscConfig+0x958>
 8002e0a:	4b80      	ldr	r3, [pc, #512]	@ (800300c <HAL_RCC_OscConfig+0xb40>)
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	4a7f      	ldr	r2, [pc, #508]	@ (800300c <HAL_RCC_OscConfig+0xb40>)
 8002e10:	f023 0301 	bic.w	r3, r3, #1
 8002e14:	6213      	str	r3, [r2, #32]
 8002e16:	4b7d      	ldr	r3, [pc, #500]	@ (800300c <HAL_RCC_OscConfig+0xb40>)
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	4a7c      	ldr	r2, [pc, #496]	@ (800300c <HAL_RCC_OscConfig+0xb40>)
 8002e1c:	f023 0304 	bic.w	r3, r3, #4
 8002e20:	6213      	str	r3, [r2, #32]
 8002e22:	e020      	b.n	8002e66 <HAL_RCC_OscConfig+0x99a>
 8002e24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e28:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b05      	cmp	r3, #5
 8002e32:	d10c      	bne.n	8002e4e <HAL_RCC_OscConfig+0x982>
 8002e34:	4b75      	ldr	r3, [pc, #468]	@ (800300c <HAL_RCC_OscConfig+0xb40>)
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	4a74      	ldr	r2, [pc, #464]	@ (800300c <HAL_RCC_OscConfig+0xb40>)
 8002e3a:	f043 0304 	orr.w	r3, r3, #4
 8002e3e:	6213      	str	r3, [r2, #32]
 8002e40:	4b72      	ldr	r3, [pc, #456]	@ (800300c <HAL_RCC_OscConfig+0xb40>)
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	4a71      	ldr	r2, [pc, #452]	@ (800300c <HAL_RCC_OscConfig+0xb40>)
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	6213      	str	r3, [r2, #32]
 8002e4c:	e00b      	b.n	8002e66 <HAL_RCC_OscConfig+0x99a>
 8002e4e:	4b6f      	ldr	r3, [pc, #444]	@ (800300c <HAL_RCC_OscConfig+0xb40>)
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	4a6e      	ldr	r2, [pc, #440]	@ (800300c <HAL_RCC_OscConfig+0xb40>)
 8002e54:	f023 0301 	bic.w	r3, r3, #1
 8002e58:	6213      	str	r3, [r2, #32]
 8002e5a:	4b6c      	ldr	r3, [pc, #432]	@ (800300c <HAL_RCC_OscConfig+0xb40>)
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	4a6b      	ldr	r2, [pc, #428]	@ (800300c <HAL_RCC_OscConfig+0xb40>)
 8002e60:	f023 0304 	bic.w	r3, r3, #4
 8002e64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e6a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 8081 	beq.w	8002f7a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e78:	f7fd fe52 	bl	8000b20 <HAL_GetTick>
 8002e7c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e80:	e00b      	b.n	8002e9a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e82:	f7fd fe4d 	bl	8000b20 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e365      	b.n	8003566 <HAL_RCC_OscConfig+0x109a>
 8002e9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e9e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eaa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	fa93 f2a3 	rbit	r2, r3
 8002eb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eb8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ec2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ece:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	fa93 f2a3 	rbit	r2, r3
 8002ed8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002edc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002ee0:	601a      	str	r2, [r3, #0]
  return result;
 8002ee2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ee6:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002eea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eec:	fab3 f383 	clz	r3, r3
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	f043 0302 	orr.w	r3, r3, #2
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d102      	bne.n	8002f06 <HAL_RCC_OscConfig+0xa3a>
 8002f00:	4b42      	ldr	r3, [pc, #264]	@ (800300c <HAL_RCC_OscConfig+0xb40>)
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	e013      	b.n	8002f2e <HAL_RCC_OscConfig+0xa62>
 8002f06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f0a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002f0e:	2202      	movs	r2, #2
 8002f10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f16:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	fa93 f2a3 	rbit	r2, r3
 8002f20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f24:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	4b38      	ldr	r3, [pc, #224]	@ (800300c <HAL_RCC_OscConfig+0xb40>)
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002f32:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002f36:	2102      	movs	r1, #2
 8002f38:	6011      	str	r1, [r2, #0]
 8002f3a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002f3e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002f42:	6812      	ldr	r2, [r2, #0]
 8002f44:	fa92 f1a2 	rbit	r1, r2
 8002f48:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002f4c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002f50:	6011      	str	r1, [r2, #0]
  return result;
 8002f52:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002f56:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	fab2 f282 	clz	r2, r2
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	f002 021f 	and.w	r2, r2, #31
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d084      	beq.n	8002e82 <HAL_RCC_OscConfig+0x9b6>
 8002f78:	e083      	b.n	8003082 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f7a:	f7fd fdd1 	bl	8000b20 <HAL_GetTick>
 8002f7e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f82:	e00b      	b.n	8002f9c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f84:	f7fd fdcc 	bl	8000b20 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e2e4      	b.n	8003566 <HAL_RCC_OscConfig+0x109a>
 8002f9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fa0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fac:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	fa93 f2a3 	rbit	r2, r3
 8002fb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fba:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fc4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002fc8:	2202      	movs	r2, #2
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fd0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	fa93 f2a3 	rbit	r2, r3
 8002fda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fde:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002fe2:	601a      	str	r2, [r3, #0]
  return result;
 8002fe4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fe8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002fec:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fee:	fab3 f383 	clz	r3, r3
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	095b      	lsrs	r3, r3, #5
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	f043 0302 	orr.w	r3, r3, #2
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d106      	bne.n	8003010 <HAL_RCC_OscConfig+0xb44>
 8003002:	4b02      	ldr	r3, [pc, #8]	@ (800300c <HAL_RCC_OscConfig+0xb40>)
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	e017      	b.n	8003038 <HAL_RCC_OscConfig+0xb6c>
 8003008:	40007000 	.word	0x40007000
 800300c:	40021000 	.word	0x40021000
 8003010:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003014:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003018:	2202      	movs	r2, #2
 800301a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003020:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	fa93 f2a3 	rbit	r2, r3
 800302a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800302e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	4bb3      	ldr	r3, [pc, #716]	@ (8003304 <HAL_RCC_OscConfig+0xe38>)
 8003036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003038:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800303c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003040:	2102      	movs	r1, #2
 8003042:	6011      	str	r1, [r2, #0]
 8003044:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003048:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800304c:	6812      	ldr	r2, [r2, #0]
 800304e:	fa92 f1a2 	rbit	r1, r2
 8003052:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003056:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800305a:	6011      	str	r1, [r2, #0]
  return result;
 800305c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003060:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003064:	6812      	ldr	r2, [r2, #0]
 8003066:	fab2 f282 	clz	r2, r2
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	f002 021f 	and.w	r2, r2, #31
 8003076:	2101      	movs	r1, #1
 8003078:	fa01 f202 	lsl.w	r2, r1, r2
 800307c:	4013      	ands	r3, r2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d180      	bne.n	8002f84 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003082:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8003086:	2b01      	cmp	r3, #1
 8003088:	d105      	bne.n	8003096 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800308a:	4b9e      	ldr	r3, [pc, #632]	@ (8003304 <HAL_RCC_OscConfig+0xe38>)
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	4a9d      	ldr	r2, [pc, #628]	@ (8003304 <HAL_RCC_OscConfig+0xe38>)
 8003090:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003094:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003096:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800309a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 825e 	beq.w	8003564 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030a8:	4b96      	ldr	r3, [pc, #600]	@ (8003304 <HAL_RCC_OscConfig+0xe38>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 030c 	and.w	r3, r3, #12
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	f000 821f 	beq.w	80034f4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030ba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	f040 8170 	bne.w	80033a8 <HAL_RCC_OscConfig+0xedc>
 80030c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030cc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80030d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80030d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030da:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	fa93 f2a3 	rbit	r2, r3
 80030e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030e8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80030ec:	601a      	str	r2, [r3, #0]
  return result;
 80030ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030f2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80030f6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f8:	fab3 f383 	clz	r3, r3
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003102:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	461a      	mov	r2, r3
 800310a:	2300      	movs	r3, #0
 800310c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310e:	f7fd fd07 	bl	8000b20 <HAL_GetTick>
 8003112:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003116:	e009      	b.n	800312c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003118:	f7fd fd02 	bl	8000b20 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e21c      	b.n	8003566 <HAL_RCC_OscConfig+0x109a>
 800312c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003130:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003134:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003138:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800313e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	fa93 f2a3 	rbit	r2, r3
 8003148:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800314c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003150:	601a      	str	r2, [r3, #0]
  return result;
 8003152:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003156:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800315a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800315c:	fab3 f383 	clz	r3, r3
 8003160:	b2db      	uxtb	r3, r3
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	b2db      	uxtb	r3, r3
 8003166:	f043 0301 	orr.w	r3, r3, #1
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b01      	cmp	r3, #1
 800316e:	d102      	bne.n	8003176 <HAL_RCC_OscConfig+0xcaa>
 8003170:	4b64      	ldr	r3, [pc, #400]	@ (8003304 <HAL_RCC_OscConfig+0xe38>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	e027      	b.n	80031c6 <HAL_RCC_OscConfig+0xcfa>
 8003176:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800317a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800317e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003182:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003184:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003188:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	fa93 f2a3 	rbit	r2, r3
 8003192:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003196:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031a0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80031a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031ae:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	fa93 f2a3 	rbit	r2, r3
 80031b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031bc:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	4b50      	ldr	r3, [pc, #320]	@ (8003304 <HAL_RCC_OscConfig+0xe38>)
 80031c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80031ca:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80031ce:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80031d2:	6011      	str	r1, [r2, #0]
 80031d4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80031d8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80031dc:	6812      	ldr	r2, [r2, #0]
 80031de:	fa92 f1a2 	rbit	r1, r2
 80031e2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80031e6:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80031ea:	6011      	str	r1, [r2, #0]
  return result;
 80031ec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80031f0:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	fab2 f282 	clz	r2, r2
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	f042 0220 	orr.w	r2, r2, #32
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	f002 021f 	and.w	r2, r2, #31
 8003206:	2101      	movs	r1, #1
 8003208:	fa01 f202 	lsl.w	r2, r1, r2
 800320c:	4013      	ands	r3, r2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d182      	bne.n	8003118 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003212:	4b3c      	ldr	r3, [pc, #240]	@ (8003304 <HAL_RCC_OscConfig+0xe38>)
 8003214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003216:	f023 020f 	bic.w	r2, r3, #15
 800321a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800321e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003226:	4937      	ldr	r1, [pc, #220]	@ (8003304 <HAL_RCC_OscConfig+0xe38>)
 8003228:	4313      	orrs	r3, r2
 800322a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800322c:	4b35      	ldr	r3, [pc, #212]	@ (8003304 <HAL_RCC_OscConfig+0xe38>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8003234:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003238:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6a19      	ldr	r1, [r3, #32]
 8003240:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003244:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	430b      	orrs	r3, r1
 800324e:	492d      	ldr	r1, [pc, #180]	@ (8003304 <HAL_RCC_OscConfig+0xe38>)
 8003250:	4313      	orrs	r3, r2
 8003252:	604b      	str	r3, [r1, #4]
 8003254:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003258:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800325c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003260:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003262:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003266:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	fa93 f2a3 	rbit	r2, r3
 8003270:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003274:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003278:	601a      	str	r2, [r3, #0]
  return result;
 800327a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800327e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003282:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003284:	fab3 f383 	clz	r3, r3
 8003288:	b2db      	uxtb	r3, r3
 800328a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800328e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	461a      	mov	r2, r3
 8003296:	2301      	movs	r3, #1
 8003298:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329a:	f7fd fc41 	bl	8000b20 <HAL_GetTick>
 800329e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032a2:	e009      	b.n	80032b8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a4:	f7fd fc3c 	bl	8000b20 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e156      	b.n	8003566 <HAL_RCC_OscConfig+0x109a>
 80032b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032bc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80032c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032ca:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	fa93 f2a3 	rbit	r2, r3
 80032d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032d8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80032dc:	601a      	str	r2, [r3, #0]
  return result;
 80032de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032e2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80032e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032e8:	fab3 f383 	clz	r3, r3
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	f043 0301 	orr.w	r3, r3, #1
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d105      	bne.n	8003308 <HAL_RCC_OscConfig+0xe3c>
 80032fc:	4b01      	ldr	r3, [pc, #4]	@ (8003304 <HAL_RCC_OscConfig+0xe38>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	e02a      	b.n	8003358 <HAL_RCC_OscConfig+0xe8c>
 8003302:	bf00      	nop
 8003304:	40021000 	.word	0x40021000
 8003308:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800330c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003310:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003314:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003316:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800331a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	fa93 f2a3 	rbit	r2, r3
 8003324:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003328:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003332:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003336:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003340:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	fa93 f2a3 	rbit	r2, r3
 800334a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800334e:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	4b86      	ldr	r3, [pc, #536]	@ (8003570 <HAL_RCC_OscConfig+0x10a4>)
 8003356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003358:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800335c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003360:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003364:	6011      	str	r1, [r2, #0]
 8003366:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800336a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800336e:	6812      	ldr	r2, [r2, #0]
 8003370:	fa92 f1a2 	rbit	r1, r2
 8003374:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003378:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800337c:	6011      	str	r1, [r2, #0]
  return result;
 800337e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003382:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	fab2 f282 	clz	r2, r2
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	f042 0220 	orr.w	r2, r2, #32
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	f002 021f 	and.w	r2, r2, #31
 8003398:	2101      	movs	r1, #1
 800339a:	fa01 f202 	lsl.w	r2, r1, r2
 800339e:	4013      	ands	r3, r2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f43f af7f 	beq.w	80032a4 <HAL_RCC_OscConfig+0xdd8>
 80033a6:	e0dd      	b.n	8003564 <HAL_RCC_OscConfig+0x1098>
 80033a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033ac:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80033b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80033b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033ba:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	fa93 f2a3 	rbit	r2, r3
 80033c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033c8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80033cc:	601a      	str	r2, [r3, #0]
  return result;
 80033ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033d2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80033d6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d8:	fab3 f383 	clz	r3, r3
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80033e2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	461a      	mov	r2, r3
 80033ea:	2300      	movs	r3, #0
 80033ec:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ee:	f7fd fb97 	bl	8000b20 <HAL_GetTick>
 80033f2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033f6:	e009      	b.n	800340c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f8:	f7fd fb92 	bl	8000b20 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e0ac      	b.n	8003566 <HAL_RCC_OscConfig+0x109a>
 800340c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003410:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003414:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003418:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800341e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	fa93 f2a3 	rbit	r2, r3
 8003428:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800342c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003430:	601a      	str	r2, [r3, #0]
  return result;
 8003432:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003436:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800343a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800343c:	fab3 f383 	clz	r3, r3
 8003440:	b2db      	uxtb	r3, r3
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	b2db      	uxtb	r3, r3
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b01      	cmp	r3, #1
 800344e:	d102      	bne.n	8003456 <HAL_RCC_OscConfig+0xf8a>
 8003450:	4b47      	ldr	r3, [pc, #284]	@ (8003570 <HAL_RCC_OscConfig+0x10a4>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	e027      	b.n	80034a6 <HAL_RCC_OscConfig+0xfda>
 8003456:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800345a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800345e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003462:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003464:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003468:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	fa93 f2a3 	rbit	r2, r3
 8003472:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003476:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003480:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003484:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800348e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	fa93 f2a3 	rbit	r2, r3
 8003498:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800349c:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	4b33      	ldr	r3, [pc, #204]	@ (8003570 <HAL_RCC_OscConfig+0x10a4>)
 80034a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80034aa:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80034ae:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80034b2:	6011      	str	r1, [r2, #0]
 80034b4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80034b8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80034bc:	6812      	ldr	r2, [r2, #0]
 80034be:	fa92 f1a2 	rbit	r1, r2
 80034c2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80034c6:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80034ca:	6011      	str	r1, [r2, #0]
  return result;
 80034cc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80034d0:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80034d4:	6812      	ldr	r2, [r2, #0]
 80034d6:	fab2 f282 	clz	r2, r2
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	f042 0220 	orr.w	r2, r2, #32
 80034e0:	b2d2      	uxtb	r2, r2
 80034e2:	f002 021f 	and.w	r2, r2, #31
 80034e6:	2101      	movs	r1, #1
 80034e8:	fa01 f202 	lsl.w	r2, r1, r2
 80034ec:	4013      	ands	r3, r2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d182      	bne.n	80033f8 <HAL_RCC_OscConfig+0xf2c>
 80034f2:	e037      	b.n	8003564 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e02e      	b.n	8003566 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003508:	4b19      	ldr	r3, [pc, #100]	@ (8003570 <HAL_RCC_OscConfig+0x10a4>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003510:	4b17      	ldr	r3, [pc, #92]	@ (8003570 <HAL_RCC_OscConfig+0x10a4>)
 8003512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003514:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003518:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800351c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003520:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003524:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	429a      	cmp	r2, r3
 800352e:	d117      	bne.n	8003560 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003530:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003534:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003538:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800353c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003544:	429a      	cmp	r2, r3
 8003546:	d10b      	bne.n	8003560 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003548:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800354c:	f003 020f 	and.w	r2, r3, #15
 8003550:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003554:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800355c:	429a      	cmp	r2, r3
 800355e:	d001      	beq.n	8003564 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e000      	b.n	8003566 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40021000 	.word	0x40021000

08003574 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b09e      	sub	sp, #120	@ 0x78
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800357e:	2300      	movs	r3, #0
 8003580:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e162      	b.n	8003852 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800358c:	4b90      	ldr	r3, [pc, #576]	@ (80037d0 <HAL_RCC_ClockConfig+0x25c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d910      	bls.n	80035bc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359a:	4b8d      	ldr	r3, [pc, #564]	@ (80037d0 <HAL_RCC_ClockConfig+0x25c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f023 0207 	bic.w	r2, r3, #7
 80035a2:	498b      	ldr	r1, [pc, #556]	@ (80037d0 <HAL_RCC_ClockConfig+0x25c>)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035aa:	4b89      	ldr	r3, [pc, #548]	@ (80037d0 <HAL_RCC_ClockConfig+0x25c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e14a      	b.n	8003852 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c8:	4b82      	ldr	r3, [pc, #520]	@ (80037d4 <HAL_RCC_ClockConfig+0x260>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	497f      	ldr	r1, [pc, #508]	@ (80037d4 <HAL_RCC_ClockConfig+0x260>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 80dc 	beq.w	80037a0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d13c      	bne.n	800366a <HAL_RCC_ClockConfig+0xf6>
 80035f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035f4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035f8:	fa93 f3a3 	rbit	r3, r3
 80035fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80035fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003600:	fab3 f383 	clz	r3, r3
 8003604:	b2db      	uxtb	r3, r3
 8003606:	095b      	lsrs	r3, r3, #5
 8003608:	b2db      	uxtb	r3, r3
 800360a:	f043 0301 	orr.w	r3, r3, #1
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b01      	cmp	r3, #1
 8003612:	d102      	bne.n	800361a <HAL_RCC_ClockConfig+0xa6>
 8003614:	4b6f      	ldr	r3, [pc, #444]	@ (80037d4 <HAL_RCC_ClockConfig+0x260>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	e00f      	b.n	800363a <HAL_RCC_ClockConfig+0xc6>
 800361a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800361e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003620:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003622:	fa93 f3a3 	rbit	r3, r3
 8003626:	667b      	str	r3, [r7, #100]	@ 0x64
 8003628:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800362c:	663b      	str	r3, [r7, #96]	@ 0x60
 800362e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003630:	fa93 f3a3 	rbit	r3, r3
 8003634:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003636:	4b67      	ldr	r3, [pc, #412]	@ (80037d4 <HAL_RCC_ClockConfig+0x260>)
 8003638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800363e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003640:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003642:	fa92 f2a2 	rbit	r2, r2
 8003646:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003648:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800364a:	fab2 f282 	clz	r2, r2
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	f042 0220 	orr.w	r2, r2, #32
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	f002 021f 	and.w	r2, r2, #31
 800365a:	2101      	movs	r1, #1
 800365c:	fa01 f202 	lsl.w	r2, r1, r2
 8003660:	4013      	ands	r3, r2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d17b      	bne.n	800375e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e0f3      	b.n	8003852 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b02      	cmp	r3, #2
 8003670:	d13c      	bne.n	80036ec <HAL_RCC_ClockConfig+0x178>
 8003672:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003676:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003678:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800367a:	fa93 f3a3 	rbit	r3, r3
 800367e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003680:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003682:	fab3 f383 	clz	r3, r3
 8003686:	b2db      	uxtb	r3, r3
 8003688:	095b      	lsrs	r3, r3, #5
 800368a:	b2db      	uxtb	r3, r3
 800368c:	f043 0301 	orr.w	r3, r3, #1
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b01      	cmp	r3, #1
 8003694:	d102      	bne.n	800369c <HAL_RCC_ClockConfig+0x128>
 8003696:	4b4f      	ldr	r3, [pc, #316]	@ (80037d4 <HAL_RCC_ClockConfig+0x260>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	e00f      	b.n	80036bc <HAL_RCC_ClockConfig+0x148>
 800369c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036a4:	fa93 f3a3 	rbit	r3, r3
 80036a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80036aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80036b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036b2:	fa93 f3a3 	rbit	r3, r3
 80036b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036b8:	4b46      	ldr	r3, [pc, #280]	@ (80037d4 <HAL_RCC_ClockConfig+0x260>)
 80036ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036c0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80036c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80036c4:	fa92 f2a2 	rbit	r2, r2
 80036c8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80036ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036cc:	fab2 f282 	clz	r2, r2
 80036d0:	b2d2      	uxtb	r2, r2
 80036d2:	f042 0220 	orr.w	r2, r2, #32
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	f002 021f 	and.w	r2, r2, #31
 80036dc:	2101      	movs	r1, #1
 80036de:	fa01 f202 	lsl.w	r2, r1, r2
 80036e2:	4013      	ands	r3, r2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d13a      	bne.n	800375e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e0b2      	b.n	8003852 <HAL_RCC_ClockConfig+0x2de>
 80036ec:	2302      	movs	r3, #2
 80036ee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f2:	fa93 f3a3 	rbit	r3, r3
 80036f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80036f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fa:	fab3 f383 	clz	r3, r3
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	095b      	lsrs	r3, r3, #5
 8003702:	b2db      	uxtb	r3, r3
 8003704:	f043 0301 	orr.w	r3, r3, #1
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b01      	cmp	r3, #1
 800370c:	d102      	bne.n	8003714 <HAL_RCC_ClockConfig+0x1a0>
 800370e:	4b31      	ldr	r3, [pc, #196]	@ (80037d4 <HAL_RCC_ClockConfig+0x260>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	e00d      	b.n	8003730 <HAL_RCC_ClockConfig+0x1bc>
 8003714:	2302      	movs	r3, #2
 8003716:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800371a:	fa93 f3a3 	rbit	r3, r3
 800371e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003720:	2302      	movs	r3, #2
 8003722:	623b      	str	r3, [r7, #32]
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	fa93 f3a3 	rbit	r3, r3
 800372a:	61fb      	str	r3, [r7, #28]
 800372c:	4b29      	ldr	r3, [pc, #164]	@ (80037d4 <HAL_RCC_ClockConfig+0x260>)
 800372e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003730:	2202      	movs	r2, #2
 8003732:	61ba      	str	r2, [r7, #24]
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	fa92 f2a2 	rbit	r2, r2
 800373a:	617a      	str	r2, [r7, #20]
  return result;
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	fab2 f282 	clz	r2, r2
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	f042 0220 	orr.w	r2, r2, #32
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	f002 021f 	and.w	r2, r2, #31
 800374e:	2101      	movs	r1, #1
 8003750:	fa01 f202 	lsl.w	r2, r1, r2
 8003754:	4013      	ands	r3, r2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e079      	b.n	8003852 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800375e:	4b1d      	ldr	r3, [pc, #116]	@ (80037d4 <HAL_RCC_ClockConfig+0x260>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f023 0203 	bic.w	r2, r3, #3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	491a      	ldr	r1, [pc, #104]	@ (80037d4 <HAL_RCC_ClockConfig+0x260>)
 800376c:	4313      	orrs	r3, r2
 800376e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003770:	f7fd f9d6 	bl	8000b20 <HAL_GetTick>
 8003774:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003776:	e00a      	b.n	800378e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003778:	f7fd f9d2 	bl	8000b20 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003786:	4293      	cmp	r3, r2
 8003788:	d901      	bls.n	800378e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e061      	b.n	8003852 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378e:	4b11      	ldr	r3, [pc, #68]	@ (80037d4 <HAL_RCC_ClockConfig+0x260>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f003 020c 	and.w	r2, r3, #12
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	429a      	cmp	r2, r3
 800379e:	d1eb      	bne.n	8003778 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037a0:	4b0b      	ldr	r3, [pc, #44]	@ (80037d0 <HAL_RCC_ClockConfig+0x25c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d214      	bcs.n	80037d8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ae:	4b08      	ldr	r3, [pc, #32]	@ (80037d0 <HAL_RCC_ClockConfig+0x25c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f023 0207 	bic.w	r2, r3, #7
 80037b6:	4906      	ldr	r1, [pc, #24]	@ (80037d0 <HAL_RCC_ClockConfig+0x25c>)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037be:	4b04      	ldr	r3, [pc, #16]	@ (80037d0 <HAL_RCC_ClockConfig+0x25c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d005      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e040      	b.n	8003852 <HAL_RCC_ClockConfig+0x2de>
 80037d0:	40022000 	.word	0x40022000
 80037d4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d008      	beq.n	80037f6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037e4:	4b1d      	ldr	r3, [pc, #116]	@ (800385c <HAL_RCC_ClockConfig+0x2e8>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	491a      	ldr	r1, [pc, #104]	@ (800385c <HAL_RCC_ClockConfig+0x2e8>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0308 	and.w	r3, r3, #8
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d009      	beq.n	8003816 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003802:	4b16      	ldr	r3, [pc, #88]	@ (800385c <HAL_RCC_ClockConfig+0x2e8>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	4912      	ldr	r1, [pc, #72]	@ (800385c <HAL_RCC_ClockConfig+0x2e8>)
 8003812:	4313      	orrs	r3, r2
 8003814:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003816:	f000 f829 	bl	800386c <HAL_RCC_GetSysClockFreq>
 800381a:	4601      	mov	r1, r0
 800381c:	4b0f      	ldr	r3, [pc, #60]	@ (800385c <HAL_RCC_ClockConfig+0x2e8>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003824:	22f0      	movs	r2, #240	@ 0xf0
 8003826:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	fa92 f2a2 	rbit	r2, r2
 800382e:	60fa      	str	r2, [r7, #12]
  return result;
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	fab2 f282 	clz	r2, r2
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	40d3      	lsrs	r3, r2
 800383a:	4a09      	ldr	r2, [pc, #36]	@ (8003860 <HAL_RCC_ClockConfig+0x2ec>)
 800383c:	5cd3      	ldrb	r3, [r2, r3]
 800383e:	fa21 f303 	lsr.w	r3, r1, r3
 8003842:	4a08      	ldr	r2, [pc, #32]	@ (8003864 <HAL_RCC_ClockConfig+0x2f0>)
 8003844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003846:	4b08      	ldr	r3, [pc, #32]	@ (8003868 <HAL_RCC_ClockConfig+0x2f4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f7fd f924 	bl	8000a98 <HAL_InitTick>
  
  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3778      	adds	r7, #120	@ 0x78
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40021000 	.word	0x40021000
 8003860:	08004e90 	.word	0x08004e90
 8003864:	20000000 	.word	0x20000000
 8003868:	20000004 	.word	0x20000004

0800386c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	2300      	movs	r3, #0
 8003878:	60bb      	str	r3, [r7, #8]
 800387a:	2300      	movs	r3, #0
 800387c:	617b      	str	r3, [r7, #20]
 800387e:	2300      	movs	r3, #0
 8003880:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003882:	2300      	movs	r3, #0
 8003884:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003886:	4b1f      	ldr	r3, [pc, #124]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x98>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f003 030c 	and.w	r3, r3, #12
 8003892:	2b04      	cmp	r3, #4
 8003894:	d002      	beq.n	800389c <HAL_RCC_GetSysClockFreq+0x30>
 8003896:	2b08      	cmp	r3, #8
 8003898:	d003      	beq.n	80038a2 <HAL_RCC_GetSysClockFreq+0x36>
 800389a:	e029      	b.n	80038f0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800389c:	4b1a      	ldr	r3, [pc, #104]	@ (8003908 <HAL_RCC_GetSysClockFreq+0x9c>)
 800389e:	613b      	str	r3, [r7, #16]
      break;
 80038a0:	e029      	b.n	80038f6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	0c9b      	lsrs	r3, r3, #18
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	4a18      	ldr	r2, [pc, #96]	@ (800390c <HAL_RCC_GetSysClockFreq+0xa0>)
 80038ac:	5cd3      	ldrb	r3, [r2, r3]
 80038ae:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80038b0:	4b14      	ldr	r3, [pc, #80]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x98>)
 80038b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b4:	f003 030f 	and.w	r3, r3, #15
 80038b8:	4a15      	ldr	r2, [pc, #84]	@ (8003910 <HAL_RCC_GetSysClockFreq+0xa4>)
 80038ba:	5cd3      	ldrb	r3, [r2, r3]
 80038bc:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d008      	beq.n	80038da <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80038c8:	4a0f      	ldr	r2, [pc, #60]	@ (8003908 <HAL_RCC_GetSysClockFreq+0x9c>)
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	fb02 f303 	mul.w	r3, r2, r3
 80038d6:	617b      	str	r3, [r7, #20]
 80038d8:	e007      	b.n	80038ea <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80038da:	4a0b      	ldr	r2, [pc, #44]	@ (8003908 <HAL_RCC_GetSysClockFreq+0x9c>)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	fbb2 f2f3 	udiv	r2, r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	fb02 f303 	mul.w	r3, r2, r3
 80038e8:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	613b      	str	r3, [r7, #16]
      break;
 80038ee:	e002      	b.n	80038f6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038f0:	4b05      	ldr	r3, [pc, #20]	@ (8003908 <HAL_RCC_GetSysClockFreq+0x9c>)
 80038f2:	613b      	str	r3, [r7, #16]
      break;
 80038f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038f6:	693b      	ldr	r3, [r7, #16]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	371c      	adds	r7, #28
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	40021000 	.word	0x40021000
 8003908:	007a1200 	.word	0x007a1200
 800390c:	08004ea8 	.word	0x08004ea8
 8003910:	08004eb8 	.word	0x08004eb8

08003914 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003918:	4b03      	ldr	r3, [pc, #12]	@ (8003928 <HAL_RCC_GetHCLKFreq+0x14>)
 800391a:	681b      	ldr	r3, [r3, #0]
}
 800391c:	4618      	mov	r0, r3
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	20000000 	.word	0x20000000

0800392c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003932:	f7ff ffef 	bl	8003914 <HAL_RCC_GetHCLKFreq>
 8003936:	4601      	mov	r1, r0
 8003938:	4b0b      	ldr	r3, [pc, #44]	@ (8003968 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003940:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003944:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	fa92 f2a2 	rbit	r2, r2
 800394c:	603a      	str	r2, [r7, #0]
  return result;
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	fab2 f282 	clz	r2, r2
 8003954:	b2d2      	uxtb	r2, r2
 8003956:	40d3      	lsrs	r3, r2
 8003958:	4a04      	ldr	r2, [pc, #16]	@ (800396c <HAL_RCC_GetPCLK1Freq+0x40>)
 800395a:	5cd3      	ldrb	r3, [r2, r3]
 800395c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003960:	4618      	mov	r0, r3
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40021000 	.word	0x40021000
 800396c:	08004ea0 	.word	0x08004ea0

08003970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003976:	f7ff ffcd 	bl	8003914 <HAL_RCC_GetHCLKFreq>
 800397a:	4601      	mov	r1, r0
 800397c:	4b0b      	ldr	r3, [pc, #44]	@ (80039ac <HAL_RCC_GetPCLK2Freq+0x3c>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003984:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003988:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	fa92 f2a2 	rbit	r2, r2
 8003990:	603a      	str	r2, [r7, #0]
  return result;
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	fab2 f282 	clz	r2, r2
 8003998:	b2d2      	uxtb	r2, r2
 800399a:	40d3      	lsrs	r3, r2
 800399c:	4a04      	ldr	r2, [pc, #16]	@ (80039b0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800399e:	5cd3      	ldrb	r3, [r2, r3]
 80039a0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80039a4:	4618      	mov	r0, r3
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40021000 	.word	0x40021000
 80039b0:	08004ea0 	.word	0x08004ea0

080039b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b092      	sub	sp, #72	@ 0x48
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80039c4:	2300      	movs	r3, #0
 80039c6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 80d4 	beq.w	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039d8:	4b4e      	ldr	r3, [pc, #312]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039da:	69db      	ldr	r3, [r3, #28]
 80039dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10e      	bne.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039e4:	4b4b      	ldr	r3, [pc, #300]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	4a4a      	ldr	r2, [pc, #296]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ee:	61d3      	str	r3, [r2, #28]
 80039f0:	4b48      	ldr	r3, [pc, #288]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f8:	60bb      	str	r3, [r7, #8]
 80039fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039fc:	2301      	movs	r3, #1
 80039fe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a02:	4b45      	ldr	r3, [pc, #276]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d118      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a0e:	4b42      	ldr	r3, [pc, #264]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a41      	ldr	r2, [pc, #260]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a18:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a1a:	f7fd f881 	bl	8000b20 <HAL_GetTick>
 8003a1e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a20:	e008      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a22:	f7fd f87d 	bl	8000b20 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b64      	cmp	r3, #100	@ 0x64
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e1d6      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a34:	4b38      	ldr	r3, [pc, #224]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0f0      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a40:	4b34      	ldr	r3, [pc, #208]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 8084 	beq.w	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a5a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d07c      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a60:	4b2c      	ldr	r3, [pc, #176]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a6a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a6e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a72:	fa93 f3a3 	rbit	r3, r3
 8003a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a7a:	fab3 f383 	clz	r3, r3
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	461a      	mov	r2, r3
 8003a82:	4b26      	ldr	r3, [pc, #152]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a84:	4413      	add	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	461a      	mov	r2, r3
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a92:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a96:	fa93 f3a3 	rbit	r3, r3
 8003a9a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a9e:	fab3 f383 	clz	r3, r3
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4b1d      	ldr	r3, [pc, #116]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003aa8:	4413      	add	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	461a      	mov	r2, r3
 8003aae:	2300      	movs	r3, #0
 8003ab0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ab2:	4a18      	ldr	r2, [pc, #96]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ab6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d04b      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac2:	f7fd f82d 	bl	8000b20 <HAL_GetTick>
 8003ac6:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac8:	e00a      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aca:	f7fd f829 	bl	8000b20 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e180      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae6:	fa93 f3a3 	rbit	r3, r3
 8003aea:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aec:	2302      	movs	r3, #2
 8003aee:	623b      	str	r3, [r7, #32]
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	fa93 f3a3 	rbit	r3, r3
 8003af6:	61fb      	str	r3, [r7, #28]
  return result;
 8003af8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003afa:	fab3 f383 	clz	r3, r3
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	095b      	lsrs	r3, r3, #5
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	f043 0302 	orr.w	r3, r3, #2
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d108      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003b0e:	4b01      	ldr	r3, [pc, #4]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	e00d      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003b14:	40021000 	.word	0x40021000
 8003b18:	40007000 	.word	0x40007000
 8003b1c:	10908100 	.word	0x10908100
 8003b20:	2302      	movs	r3, #2
 8003b22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	fa93 f3a3 	rbit	r3, r3
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	4b9a      	ldr	r3, [pc, #616]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b30:	2202      	movs	r2, #2
 8003b32:	613a      	str	r2, [r7, #16]
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	fa92 f2a2 	rbit	r2, r2
 8003b3a:	60fa      	str	r2, [r7, #12]
  return result;
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	fab2 f282 	clz	r2, r2
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b48:	b2d2      	uxtb	r2, r2
 8003b4a:	f002 021f 	and.w	r2, r2, #31
 8003b4e:	2101      	movs	r1, #1
 8003b50:	fa01 f202 	lsl.w	r2, r1, r2
 8003b54:	4013      	ands	r3, r2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0b7      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003b5a:	4b8f      	ldr	r3, [pc, #572]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	498c      	ldr	r1, [pc, #560]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b6c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d105      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b74:	4b88      	ldr	r3, [pc, #544]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	4a87      	ldr	r2, [pc, #540]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b7e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d008      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b8c:	4b82      	ldr	r3, [pc, #520]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b90:	f023 0203 	bic.w	r2, r3, #3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	497f      	ldr	r1, [pc, #508]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d008      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003baa:	4b7b      	ldr	r3, [pc, #492]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bae:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	4978      	ldr	r1, [pc, #480]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d008      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bc8:	4b73      	ldr	r3, [pc, #460]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bcc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	4970      	ldr	r1, [pc, #448]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0320 	and.w	r3, r3, #32
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d008      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003be6:	4b6c      	ldr	r3, [pc, #432]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bea:	f023 0210 	bic.w	r2, r3, #16
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	4969      	ldr	r1, [pc, #420]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d008      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003c04:	4b64      	ldr	r3, [pc, #400]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c10:	4961      	ldr	r1, [pc, #388]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d008      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c22:	4b5d      	ldr	r3, [pc, #372]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c26:	f023 0220 	bic.w	r2, r3, #32
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	495a      	ldr	r1, [pc, #360]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d008      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c40:	4b55      	ldr	r3, [pc, #340]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c44:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4c:	4952      	ldr	r1, [pc, #328]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0308 	and.w	r3, r3, #8
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d008      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c5e:	4b4e      	ldr	r3, [pc, #312]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	494b      	ldr	r1, [pc, #300]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0310 	and.w	r3, r3, #16
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d008      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c7c:	4b46      	ldr	r3, [pc, #280]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c80:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	4943      	ldr	r1, [pc, #268]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d008      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c9a:	4b3f      	ldr	r3, [pc, #252]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca6:	493c      	ldr	r1, [pc, #240]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d008      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003cb8:	4b37      	ldr	r3, [pc, #220]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cbc:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc4:	4934      	ldr	r1, [pc, #208]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d008      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003cd6:	4b30      	ldr	r3, [pc, #192]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cda:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce2:	492d      	ldr	r1, [pc, #180]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d008      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003cf4:	4b28      	ldr	r3, [pc, #160]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d00:	4925      	ldr	r1, [pc, #148]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d008      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003d12:	4b21      	ldr	r3, [pc, #132]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d16:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1e:	491e      	ldr	r1, [pc, #120]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d008      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003d30:	4b19      	ldr	r3, [pc, #100]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d34:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d3c:	4916      	ldr	r1, [pc, #88]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d008      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003d4e:	4b12      	ldr	r3, [pc, #72]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d52:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d5a:	490f      	ldr	r1, [pc, #60]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d008      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d70:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d78:	4907      	ldr	r1, [pc, #28]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00c      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003d8a:	4b03      	ldr	r3, [pc, #12]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	e002      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003d96:	bf00      	nop
 8003d98:	40021000 	.word	0x40021000
 8003d9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d9e:	4913      	ldr	r1, [pc, #76]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d008      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003db0:	4b0e      	ldr	r3, [pc, #56]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dbc:	490b      	ldr	r1, [pc, #44]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d008      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003dce:	4b07      	ldr	r3, [pc, #28]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dda:	4904      	ldr	r1, [pc, #16]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3748      	adds	r7, #72	@ 0x48
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	40021000 	.word	0x40021000

08003df0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e040      	b.n	8003e84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d106      	bne.n	8003e18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7fc fd6a 	bl	80008ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2224      	movs	r2, #36	@ 0x24
 8003e1c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0201 	bic.w	r2, r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d002      	beq.n	8003e3c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 fd8c 	bl	8004954 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 fbb5 	bl	80045ac <UART_SetConfig>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d101      	bne.n	8003e4c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e01b      	b.n	8003e84 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 fe0b 	bl	8004a98 <UART_CheckIdleState>
 8003e82:	4603      	mov	r3, r0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b08a      	sub	sp, #40	@ 0x28
 8003e90:	af02      	add	r7, sp, #8
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	603b      	str	r3, [r7, #0]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ea0:	2b20      	cmp	r3, #32
 8003ea2:	d177      	bne.n	8003f94 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <HAL_UART_Transmit+0x24>
 8003eaa:	88fb      	ldrh	r3, [r7, #6]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e070      	b.n	8003f96 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2221      	movs	r2, #33	@ 0x21
 8003ec0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ec2:	f7fc fe2d 	bl	8000b20 <HAL_GetTick>
 8003ec6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	88fa      	ldrh	r2, [r7, #6]
 8003ecc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	88fa      	ldrh	r2, [r7, #6]
 8003ed4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ee0:	d108      	bne.n	8003ef4 <HAL_UART_Transmit+0x68>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d104      	bne.n	8003ef4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003eea:	2300      	movs	r3, #0
 8003eec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	61bb      	str	r3, [r7, #24]
 8003ef2:	e003      	b.n	8003efc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003efc:	e02f      	b.n	8003f5e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2200      	movs	r2, #0
 8003f06:	2180      	movs	r1, #128	@ 0x80
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 fe6d 	bl	8004be8 <UART_WaitOnFlagUntilTimeout>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d004      	beq.n	8003f1e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2220      	movs	r2, #32
 8003f18:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e03b      	b.n	8003f96 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10b      	bne.n	8003f3c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	881a      	ldrh	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f30:	b292      	uxth	r2, r2
 8003f32:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	3302      	adds	r3, #2
 8003f38:	61bb      	str	r3, [r7, #24]
 8003f3a:	e007      	b.n	8003f4c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	781a      	ldrb	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	3b01      	subs	r3, #1
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1c9      	bne.n	8003efe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	2200      	movs	r2, #0
 8003f72:	2140      	movs	r1, #64	@ 0x40
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 fe37 	bl	8004be8 <UART_WaitOnFlagUntilTimeout>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d004      	beq.n	8003f8a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2220      	movs	r2, #32
 8003f84:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e005      	b.n	8003f96 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003f90:	2300      	movs	r3, #0
 8003f92:	e000      	b.n	8003f96 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003f94:	2302      	movs	r3, #2
  }
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3720      	adds	r7, #32
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
	...

08003fa0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b0ba      	sub	sp, #232	@ 0xe8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003fc6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003fca:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003fce:	4013      	ands	r3, r2
 8003fd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003fd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d115      	bne.n	8004008 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fe0:	f003 0320 	and.w	r3, r3, #32
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00f      	beq.n	8004008 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fec:	f003 0320 	and.w	r3, r3, #32
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d009      	beq.n	8004008 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 82ab 	beq.w	8004554 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	4798      	blx	r3
      }
      return;
 8004006:	e2a5      	b.n	8004554 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004008:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 8117 	beq.w	8004240 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d106      	bne.n	800402c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800401e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004022:	4b85      	ldr	r3, [pc, #532]	@ (8004238 <HAL_UART_IRQHandler+0x298>)
 8004024:	4013      	ands	r3, r2
 8004026:	2b00      	cmp	r3, #0
 8004028:	f000 810a 	beq.w	8004240 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800402c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b00      	cmp	r3, #0
 8004036:	d011      	beq.n	800405c <HAL_UART_IRQHandler+0xbc>
 8004038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800403c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00b      	beq.n	800405c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2201      	movs	r2, #1
 800404a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004052:	f043 0201 	orr.w	r2, r3, #1
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800405c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d011      	beq.n	800408c <HAL_UART_IRQHandler+0xec>
 8004068:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00b      	beq.n	800408c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2202      	movs	r2, #2
 800407a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004082:	f043 0204 	orr.w	r2, r3, #4
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800408c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	d011      	beq.n	80040bc <HAL_UART_IRQHandler+0x11c>
 8004098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00b      	beq.n	80040bc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2204      	movs	r2, #4
 80040aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040b2:	f043 0202 	orr.w	r2, r3, #2
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80040bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040c0:	f003 0308 	and.w	r3, r3, #8
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d017      	beq.n	80040f8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80040c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040cc:	f003 0320 	and.w	r3, r3, #32
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d105      	bne.n	80040e0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80040d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00b      	beq.n	80040f8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2208      	movs	r2, #8
 80040e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040ee:	f043 0208 	orr.w	r2, r3, #8
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80040f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004100:	2b00      	cmp	r3, #0
 8004102:	d012      	beq.n	800412a <HAL_UART_IRQHandler+0x18a>
 8004104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004108:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00c      	beq.n	800412a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004118:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004120:	f043 0220 	orr.w	r2, r3, #32
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 8211 	beq.w	8004558 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800413a:	f003 0320 	and.w	r3, r3, #32
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00d      	beq.n	800415e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004146:	f003 0320 	and.w	r3, r3, #32
 800414a:	2b00      	cmp	r3, #0
 800414c:	d007      	beq.n	800415e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004164:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004172:	2b40      	cmp	r3, #64	@ 0x40
 8004174:	d005      	beq.n	8004182 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004176:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800417a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800417e:	2b00      	cmp	r3, #0
 8004180:	d04f      	beq.n	8004222 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 fd9d 	bl	8004cc2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004192:	2b40      	cmp	r3, #64	@ 0x40
 8004194:	d141      	bne.n	800421a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3308      	adds	r3, #8
 800419c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041a4:	e853 3f00 	ldrex	r3, [r3]
 80041a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80041ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	3308      	adds	r3, #8
 80041be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80041c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80041c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80041ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80041d2:	e841 2300 	strex	r3, r2, [r1]
 80041d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80041da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1d9      	bne.n	8004196 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d013      	beq.n	8004212 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041ee:	4a13      	ldr	r2, [pc, #76]	@ (800423c <HAL_UART_IRQHandler+0x29c>)
 80041f0:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fd ff9f 	bl	800213a <HAL_DMA_Abort_IT>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d017      	beq.n	8004232 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800420c:	4610      	mov	r0, r2
 800420e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004210:	e00f      	b.n	8004232 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f9b4 	bl	8004580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004218:	e00b      	b.n	8004232 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f9b0 	bl	8004580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004220:	e007      	b.n	8004232 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f9ac 	bl	8004580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004230:	e192      	b.n	8004558 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004232:	bf00      	nop
    return;
 8004234:	e190      	b.n	8004558 <HAL_UART_IRQHandler+0x5b8>
 8004236:	bf00      	nop
 8004238:	04000120 	.word	0x04000120
 800423c:	08004d8b 	.word	0x08004d8b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004244:	2b01      	cmp	r3, #1
 8004246:	f040 814b 	bne.w	80044e0 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800424a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800424e:	f003 0310 	and.w	r3, r3, #16
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 8144 	beq.w	80044e0 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800425c:	f003 0310 	and.w	r3, r3, #16
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 813d 	beq.w	80044e0 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2210      	movs	r2, #16
 800426c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004278:	2b40      	cmp	r3, #64	@ 0x40
 800427a:	f040 80b5 	bne.w	80043e8 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800428a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 8164 	beq.w	800455c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800429a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800429e:	429a      	cmp	r2, r3
 80042a0:	f080 815c 	bcs.w	800455c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042aa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	2b20      	cmp	r3, #32
 80042b6:	f000 8086 	beq.w	80043c6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80042c6:	e853 3f00 	ldrex	r3, [r3]
 80042ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80042ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80042e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80042e8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ec:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80042f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80042f4:	e841 2300 	strex	r3, r2, [r1]
 80042f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80042fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1da      	bne.n	80042ba <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3308      	adds	r3, #8
 800430a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800430e:	e853 3f00 	ldrex	r3, [r3]
 8004312:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004314:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004316:	f023 0301 	bic.w	r3, r3, #1
 800431a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3308      	adds	r3, #8
 8004324:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004328:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800432c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004330:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004334:	e841 2300 	strex	r3, r2, [r1]
 8004338:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800433a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1e1      	bne.n	8004304 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	3308      	adds	r3, #8
 8004346:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004348:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800434a:	e853 3f00 	ldrex	r3, [r3]
 800434e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004350:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004352:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004356:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3308      	adds	r3, #8
 8004360:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004364:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004366:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004368:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800436a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800436c:	e841 2300 	strex	r3, r2, [r1]
 8004370:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004372:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1e3      	bne.n	8004340 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2220      	movs	r2, #32
 800437c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800438e:	e853 3f00 	ldrex	r3, [r3]
 8004392:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004394:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004396:	f023 0310 	bic.w	r3, r3, #16
 800439a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	461a      	mov	r2, r3
 80043a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80043a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043aa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80043ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80043b0:	e841 2300 	strex	r3, r2, [r1]
 80043b4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80043b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1e4      	bne.n	8004386 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7fd fe7c 	bl	80020be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2202      	movs	r2, #2
 80043ca:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80043d8:	b29b      	uxth	r3, r3
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	b29b      	uxth	r3, r3
 80043de:	4619      	mov	r1, r3
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f8d7 	bl	8004594 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80043e6:	e0b9      	b.n	800455c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004402:	b29b      	uxth	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 80ab 	beq.w	8004560 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800440a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 80a6 	beq.w	8004560 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800441c:	e853 3f00 	ldrex	r3, [r3]
 8004420:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004424:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004428:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	461a      	mov	r2, r3
 8004432:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004436:	647b      	str	r3, [r7, #68]	@ 0x44
 8004438:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800443c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800443e:	e841 2300 	strex	r3, r2, [r1]
 8004442:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1e4      	bne.n	8004414 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3308      	adds	r3, #8
 8004450:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004454:	e853 3f00 	ldrex	r3, [r3]
 8004458:	623b      	str	r3, [r7, #32]
   return(result);
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	f023 0301 	bic.w	r3, r3, #1
 8004460:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	3308      	adds	r3, #8
 800446a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800446e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004470:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004472:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004474:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004476:	e841 2300 	strex	r3, r2, [r1]
 800447a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800447c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1e3      	bne.n	800444a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2220      	movs	r2, #32
 8004486:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	e853 3f00 	ldrex	r3, [r3]
 80044a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f023 0310 	bic.w	r3, r3, #16
 80044aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	461a      	mov	r2, r3
 80044b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80044b8:	61fb      	str	r3, [r7, #28]
 80044ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044bc:	69b9      	ldr	r1, [r7, #24]
 80044be:	69fa      	ldr	r2, [r7, #28]
 80044c0:	e841 2300 	strex	r3, r2, [r1]
 80044c4:	617b      	str	r3, [r7, #20]
   return(result);
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1e4      	bne.n	8004496 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044d6:	4619      	mov	r1, r3
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f85b 	bl	8004594 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80044de:	e03f      	b.n	8004560 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80044e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00e      	beq.n	800450a <HAL_UART_IRQHandler+0x56a>
 80044ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d008      	beq.n	800450a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004500:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 fc81 	bl	8004e0a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004508:	e02d      	b.n	8004566 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800450a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800450e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00e      	beq.n	8004534 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004516:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800451a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800451e:	2b00      	cmp	r3, #0
 8004520:	d008      	beq.n	8004534 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004526:	2b00      	cmp	r3, #0
 8004528:	d01c      	beq.n	8004564 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	4798      	blx	r3
    }
    return;
 8004532:	e017      	b.n	8004564 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800453c:	2b00      	cmp	r3, #0
 800453e:	d012      	beq.n	8004566 <HAL_UART_IRQHandler+0x5c6>
 8004540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00c      	beq.n	8004566 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 fc32 	bl	8004db6 <UART_EndTransmit_IT>
    return;
 8004552:	e008      	b.n	8004566 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004554:	bf00      	nop
 8004556:	e006      	b.n	8004566 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004558:	bf00      	nop
 800455a:	e004      	b.n	8004566 <HAL_UART_IRQHandler+0x5c6>
      return;
 800455c:	bf00      	nop
 800455e:	e002      	b.n	8004566 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004560:	bf00      	nop
 8004562:	e000      	b.n	8004566 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004564:	bf00      	nop
  }

}
 8004566:	37e8      	adds	r7, #232	@ 0xe8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	460b      	mov	r3, r1
 800459e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b088      	sub	sp, #32
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045b4:	2300      	movs	r3, #0
 80045b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	431a      	orrs	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	69db      	ldr	r3, [r3, #28]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	4b92      	ldr	r3, [pc, #584]	@ (8004820 <UART_SetConfig+0x274>)
 80045d8:	4013      	ands	r3, r2
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6812      	ldr	r2, [r2, #0]
 80045de:	6979      	ldr	r1, [r7, #20]
 80045e0:	430b      	orrs	r3, r1
 80045e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	4313      	orrs	r3, r2
 8004608:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	430a      	orrs	r2, r1
 800461c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a80      	ldr	r2, [pc, #512]	@ (8004824 <UART_SetConfig+0x278>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d120      	bne.n	800466a <UART_SetConfig+0xbe>
 8004628:	4b7f      	ldr	r3, [pc, #508]	@ (8004828 <UART_SetConfig+0x27c>)
 800462a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462c:	f003 0303 	and.w	r3, r3, #3
 8004630:	2b03      	cmp	r3, #3
 8004632:	d817      	bhi.n	8004664 <UART_SetConfig+0xb8>
 8004634:	a201      	add	r2, pc, #4	@ (adr r2, 800463c <UART_SetConfig+0x90>)
 8004636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463a:	bf00      	nop
 800463c:	0800464d 	.word	0x0800464d
 8004640:	08004659 	.word	0x08004659
 8004644:	0800465f 	.word	0x0800465f
 8004648:	08004653 	.word	0x08004653
 800464c:	2301      	movs	r3, #1
 800464e:	77fb      	strb	r3, [r7, #31]
 8004650:	e0b5      	b.n	80047be <UART_SetConfig+0x212>
 8004652:	2302      	movs	r3, #2
 8004654:	77fb      	strb	r3, [r7, #31]
 8004656:	e0b2      	b.n	80047be <UART_SetConfig+0x212>
 8004658:	2304      	movs	r3, #4
 800465a:	77fb      	strb	r3, [r7, #31]
 800465c:	e0af      	b.n	80047be <UART_SetConfig+0x212>
 800465e:	2308      	movs	r3, #8
 8004660:	77fb      	strb	r3, [r7, #31]
 8004662:	e0ac      	b.n	80047be <UART_SetConfig+0x212>
 8004664:	2310      	movs	r3, #16
 8004666:	77fb      	strb	r3, [r7, #31]
 8004668:	e0a9      	b.n	80047be <UART_SetConfig+0x212>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a6f      	ldr	r2, [pc, #444]	@ (800482c <UART_SetConfig+0x280>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d124      	bne.n	80046be <UART_SetConfig+0x112>
 8004674:	4b6c      	ldr	r3, [pc, #432]	@ (8004828 <UART_SetConfig+0x27c>)
 8004676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004678:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800467c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004680:	d011      	beq.n	80046a6 <UART_SetConfig+0xfa>
 8004682:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004686:	d817      	bhi.n	80046b8 <UART_SetConfig+0x10c>
 8004688:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800468c:	d011      	beq.n	80046b2 <UART_SetConfig+0x106>
 800468e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004692:	d811      	bhi.n	80046b8 <UART_SetConfig+0x10c>
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <UART_SetConfig+0xf4>
 8004698:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800469c:	d006      	beq.n	80046ac <UART_SetConfig+0x100>
 800469e:	e00b      	b.n	80046b8 <UART_SetConfig+0x10c>
 80046a0:	2300      	movs	r3, #0
 80046a2:	77fb      	strb	r3, [r7, #31]
 80046a4:	e08b      	b.n	80047be <UART_SetConfig+0x212>
 80046a6:	2302      	movs	r3, #2
 80046a8:	77fb      	strb	r3, [r7, #31]
 80046aa:	e088      	b.n	80047be <UART_SetConfig+0x212>
 80046ac:	2304      	movs	r3, #4
 80046ae:	77fb      	strb	r3, [r7, #31]
 80046b0:	e085      	b.n	80047be <UART_SetConfig+0x212>
 80046b2:	2308      	movs	r3, #8
 80046b4:	77fb      	strb	r3, [r7, #31]
 80046b6:	e082      	b.n	80047be <UART_SetConfig+0x212>
 80046b8:	2310      	movs	r3, #16
 80046ba:	77fb      	strb	r3, [r7, #31]
 80046bc:	e07f      	b.n	80047be <UART_SetConfig+0x212>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a5b      	ldr	r2, [pc, #364]	@ (8004830 <UART_SetConfig+0x284>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d124      	bne.n	8004712 <UART_SetConfig+0x166>
 80046c8:	4b57      	ldr	r3, [pc, #348]	@ (8004828 <UART_SetConfig+0x27c>)
 80046ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046cc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80046d0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80046d4:	d011      	beq.n	80046fa <UART_SetConfig+0x14e>
 80046d6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80046da:	d817      	bhi.n	800470c <UART_SetConfig+0x160>
 80046dc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80046e0:	d011      	beq.n	8004706 <UART_SetConfig+0x15a>
 80046e2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80046e6:	d811      	bhi.n	800470c <UART_SetConfig+0x160>
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <UART_SetConfig+0x148>
 80046ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80046f0:	d006      	beq.n	8004700 <UART_SetConfig+0x154>
 80046f2:	e00b      	b.n	800470c <UART_SetConfig+0x160>
 80046f4:	2300      	movs	r3, #0
 80046f6:	77fb      	strb	r3, [r7, #31]
 80046f8:	e061      	b.n	80047be <UART_SetConfig+0x212>
 80046fa:	2302      	movs	r3, #2
 80046fc:	77fb      	strb	r3, [r7, #31]
 80046fe:	e05e      	b.n	80047be <UART_SetConfig+0x212>
 8004700:	2304      	movs	r3, #4
 8004702:	77fb      	strb	r3, [r7, #31]
 8004704:	e05b      	b.n	80047be <UART_SetConfig+0x212>
 8004706:	2308      	movs	r3, #8
 8004708:	77fb      	strb	r3, [r7, #31]
 800470a:	e058      	b.n	80047be <UART_SetConfig+0x212>
 800470c:	2310      	movs	r3, #16
 800470e:	77fb      	strb	r3, [r7, #31]
 8004710:	e055      	b.n	80047be <UART_SetConfig+0x212>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a47      	ldr	r2, [pc, #284]	@ (8004834 <UART_SetConfig+0x288>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d124      	bne.n	8004766 <UART_SetConfig+0x1ba>
 800471c:	4b42      	ldr	r3, [pc, #264]	@ (8004828 <UART_SetConfig+0x27c>)
 800471e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004720:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004724:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004728:	d011      	beq.n	800474e <UART_SetConfig+0x1a2>
 800472a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800472e:	d817      	bhi.n	8004760 <UART_SetConfig+0x1b4>
 8004730:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004734:	d011      	beq.n	800475a <UART_SetConfig+0x1ae>
 8004736:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800473a:	d811      	bhi.n	8004760 <UART_SetConfig+0x1b4>
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <UART_SetConfig+0x19c>
 8004740:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004744:	d006      	beq.n	8004754 <UART_SetConfig+0x1a8>
 8004746:	e00b      	b.n	8004760 <UART_SetConfig+0x1b4>
 8004748:	2300      	movs	r3, #0
 800474a:	77fb      	strb	r3, [r7, #31]
 800474c:	e037      	b.n	80047be <UART_SetConfig+0x212>
 800474e:	2302      	movs	r3, #2
 8004750:	77fb      	strb	r3, [r7, #31]
 8004752:	e034      	b.n	80047be <UART_SetConfig+0x212>
 8004754:	2304      	movs	r3, #4
 8004756:	77fb      	strb	r3, [r7, #31]
 8004758:	e031      	b.n	80047be <UART_SetConfig+0x212>
 800475a:	2308      	movs	r3, #8
 800475c:	77fb      	strb	r3, [r7, #31]
 800475e:	e02e      	b.n	80047be <UART_SetConfig+0x212>
 8004760:	2310      	movs	r3, #16
 8004762:	77fb      	strb	r3, [r7, #31]
 8004764:	e02b      	b.n	80047be <UART_SetConfig+0x212>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a33      	ldr	r2, [pc, #204]	@ (8004838 <UART_SetConfig+0x28c>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d124      	bne.n	80047ba <UART_SetConfig+0x20e>
 8004770:	4b2d      	ldr	r3, [pc, #180]	@ (8004828 <UART_SetConfig+0x27c>)
 8004772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004774:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004778:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800477c:	d011      	beq.n	80047a2 <UART_SetConfig+0x1f6>
 800477e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004782:	d817      	bhi.n	80047b4 <UART_SetConfig+0x208>
 8004784:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004788:	d011      	beq.n	80047ae <UART_SetConfig+0x202>
 800478a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800478e:	d811      	bhi.n	80047b4 <UART_SetConfig+0x208>
 8004790:	2b00      	cmp	r3, #0
 8004792:	d003      	beq.n	800479c <UART_SetConfig+0x1f0>
 8004794:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004798:	d006      	beq.n	80047a8 <UART_SetConfig+0x1fc>
 800479a:	e00b      	b.n	80047b4 <UART_SetConfig+0x208>
 800479c:	2300      	movs	r3, #0
 800479e:	77fb      	strb	r3, [r7, #31]
 80047a0:	e00d      	b.n	80047be <UART_SetConfig+0x212>
 80047a2:	2302      	movs	r3, #2
 80047a4:	77fb      	strb	r3, [r7, #31]
 80047a6:	e00a      	b.n	80047be <UART_SetConfig+0x212>
 80047a8:	2304      	movs	r3, #4
 80047aa:	77fb      	strb	r3, [r7, #31]
 80047ac:	e007      	b.n	80047be <UART_SetConfig+0x212>
 80047ae:	2308      	movs	r3, #8
 80047b0:	77fb      	strb	r3, [r7, #31]
 80047b2:	e004      	b.n	80047be <UART_SetConfig+0x212>
 80047b4:	2310      	movs	r3, #16
 80047b6:	77fb      	strb	r3, [r7, #31]
 80047b8:	e001      	b.n	80047be <UART_SetConfig+0x212>
 80047ba:	2310      	movs	r3, #16
 80047bc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047c6:	d16b      	bne.n	80048a0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80047c8:	7ffb      	ldrb	r3, [r7, #31]
 80047ca:	2b08      	cmp	r3, #8
 80047cc:	d838      	bhi.n	8004840 <UART_SetConfig+0x294>
 80047ce:	a201      	add	r2, pc, #4	@ (adr r2, 80047d4 <UART_SetConfig+0x228>)
 80047d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d4:	080047f9 	.word	0x080047f9
 80047d8:	08004801 	.word	0x08004801
 80047dc:	08004809 	.word	0x08004809
 80047e0:	08004841 	.word	0x08004841
 80047e4:	0800480f 	.word	0x0800480f
 80047e8:	08004841 	.word	0x08004841
 80047ec:	08004841 	.word	0x08004841
 80047f0:	08004841 	.word	0x08004841
 80047f4:	08004817 	.word	0x08004817
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047f8:	f7ff f898 	bl	800392c <HAL_RCC_GetPCLK1Freq>
 80047fc:	61b8      	str	r0, [r7, #24]
        break;
 80047fe:	e024      	b.n	800484a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004800:	f7ff f8b6 	bl	8003970 <HAL_RCC_GetPCLK2Freq>
 8004804:	61b8      	str	r0, [r7, #24]
        break;
 8004806:	e020      	b.n	800484a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004808:	4b0c      	ldr	r3, [pc, #48]	@ (800483c <UART_SetConfig+0x290>)
 800480a:	61bb      	str	r3, [r7, #24]
        break;
 800480c:	e01d      	b.n	800484a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800480e:	f7ff f82d 	bl	800386c <HAL_RCC_GetSysClockFreq>
 8004812:	61b8      	str	r0, [r7, #24]
        break;
 8004814:	e019      	b.n	800484a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004816:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800481a:	61bb      	str	r3, [r7, #24]
        break;
 800481c:	e015      	b.n	800484a <UART_SetConfig+0x29e>
 800481e:	bf00      	nop
 8004820:	efff69f3 	.word	0xefff69f3
 8004824:	40013800 	.word	0x40013800
 8004828:	40021000 	.word	0x40021000
 800482c:	40004400 	.word	0x40004400
 8004830:	40004800 	.word	0x40004800
 8004834:	40004c00 	.word	0x40004c00
 8004838:	40005000 	.word	0x40005000
 800483c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	77bb      	strb	r3, [r7, #30]
        break;
 8004848:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d073      	beq.n	8004938 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	005a      	lsls	r2, r3, #1
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	085b      	lsrs	r3, r3, #1
 800485a:	441a      	add	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	fbb2 f3f3 	udiv	r3, r2, r3
 8004864:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	2b0f      	cmp	r3, #15
 800486a:	d916      	bls.n	800489a <UART_SetConfig+0x2ee>
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004872:	d212      	bcs.n	800489a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	b29b      	uxth	r3, r3
 8004878:	f023 030f 	bic.w	r3, r3, #15
 800487c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	085b      	lsrs	r3, r3, #1
 8004882:	b29b      	uxth	r3, r3
 8004884:	f003 0307 	and.w	r3, r3, #7
 8004888:	b29a      	uxth	r2, r3
 800488a:	89fb      	ldrh	r3, [r7, #14]
 800488c:	4313      	orrs	r3, r2
 800488e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	89fa      	ldrh	r2, [r7, #14]
 8004896:	60da      	str	r2, [r3, #12]
 8004898:	e04e      	b.n	8004938 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	77bb      	strb	r3, [r7, #30]
 800489e:	e04b      	b.n	8004938 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048a0:	7ffb      	ldrb	r3, [r7, #31]
 80048a2:	2b08      	cmp	r3, #8
 80048a4:	d827      	bhi.n	80048f6 <UART_SetConfig+0x34a>
 80048a6:	a201      	add	r2, pc, #4	@ (adr r2, 80048ac <UART_SetConfig+0x300>)
 80048a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ac:	080048d1 	.word	0x080048d1
 80048b0:	080048d9 	.word	0x080048d9
 80048b4:	080048e1 	.word	0x080048e1
 80048b8:	080048f7 	.word	0x080048f7
 80048bc:	080048e7 	.word	0x080048e7
 80048c0:	080048f7 	.word	0x080048f7
 80048c4:	080048f7 	.word	0x080048f7
 80048c8:	080048f7 	.word	0x080048f7
 80048cc:	080048ef 	.word	0x080048ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048d0:	f7ff f82c 	bl	800392c <HAL_RCC_GetPCLK1Freq>
 80048d4:	61b8      	str	r0, [r7, #24]
        break;
 80048d6:	e013      	b.n	8004900 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048d8:	f7ff f84a 	bl	8003970 <HAL_RCC_GetPCLK2Freq>
 80048dc:	61b8      	str	r0, [r7, #24]
        break;
 80048de:	e00f      	b.n	8004900 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004950 <UART_SetConfig+0x3a4>)
 80048e2:	61bb      	str	r3, [r7, #24]
        break;
 80048e4:	e00c      	b.n	8004900 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048e6:	f7fe ffc1 	bl	800386c <HAL_RCC_GetSysClockFreq>
 80048ea:	61b8      	str	r0, [r7, #24]
        break;
 80048ec:	e008      	b.n	8004900 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048f2:	61bb      	str	r3, [r7, #24]
        break;
 80048f4:	e004      	b.n	8004900 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	77bb      	strb	r3, [r7, #30]
        break;
 80048fe:	bf00      	nop
    }

    if (pclk != 0U)
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d018      	beq.n	8004938 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	085a      	lsrs	r2, r3, #1
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	441a      	add	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	fbb2 f3f3 	udiv	r3, r2, r3
 8004918:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	2b0f      	cmp	r3, #15
 800491e:	d909      	bls.n	8004934 <UART_SetConfig+0x388>
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004926:	d205      	bcs.n	8004934 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	b29a      	uxth	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	60da      	str	r2, [r3, #12]
 8004932:	e001      	b.n	8004938 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004944:	7fbb      	ldrb	r3, [r7, #30]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3720      	adds	r7, #32
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	007a1200 	.word	0x007a1200

08004954 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004960:	f003 0308 	and.w	r3, r3, #8
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00a      	beq.n	800497e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00a      	beq.n	80049a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00a      	beq.n	80049c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	430a      	orrs	r2, r1
 80049c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c6:	f003 0304 	and.w	r3, r3, #4
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e8:	f003 0310 	and.w	r3, r3, #16
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0a:	f003 0320 	and.w	r3, r3, #32
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00a      	beq.n	8004a28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d01a      	beq.n	8004a6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a52:	d10a      	bne.n	8004a6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00a      	beq.n	8004a8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	605a      	str	r2, [r3, #4]
  }
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b098      	sub	sp, #96	@ 0x60
 8004a9c:	af02      	add	r7, sp, #8
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004aa8:	f7fc f83a 	bl	8000b20 <HAL_GetTick>
 8004aac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0308 	and.w	r3, r3, #8
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d12e      	bne.n	8004b1a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004abc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f88c 	bl	8004be8 <UART_WaitOnFlagUntilTimeout>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d021      	beq.n	8004b1a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ade:	e853 3f00 	ldrex	r3, [r3]
 8004ae2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ae6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004aea:	653b      	str	r3, [r7, #80]	@ 0x50
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	461a      	mov	r2, r3
 8004af2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004af4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004af6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004afa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004afc:	e841 2300 	strex	r3, r2, [r1]
 8004b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1e6      	bne.n	8004ad6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e062      	b.n	8004be0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b04      	cmp	r3, #4
 8004b26:	d149      	bne.n	8004bbc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b30:	2200      	movs	r2, #0
 8004b32:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f856 	bl	8004be8 <UART_WaitOnFlagUntilTimeout>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d03c      	beq.n	8004bbc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4a:	e853 3f00 	ldrex	r3, [r3]
 8004b4e:	623b      	str	r3, [r7, #32]
   return(result);
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b60:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b62:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b68:	e841 2300 	strex	r3, r2, [r1]
 8004b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1e6      	bne.n	8004b42 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3308      	adds	r3, #8
 8004b7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	e853 3f00 	ldrex	r3, [r3]
 8004b82:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f023 0301 	bic.w	r3, r3, #1
 8004b8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	3308      	adds	r3, #8
 8004b92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b94:	61fa      	str	r2, [r7, #28]
 8004b96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b98:	69b9      	ldr	r1, [r7, #24]
 8004b9a:	69fa      	ldr	r2, [r7, #28]
 8004b9c:	e841 2300 	strex	r3, r2, [r1]
 8004ba0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1e5      	bne.n	8004b74 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2220      	movs	r2, #32
 8004bac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e011      	b.n	8004be0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3758      	adds	r7, #88	@ 0x58
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	603b      	str	r3, [r7, #0]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bf8:	e04f      	b.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c00:	d04b      	beq.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c02:	f7fb ff8d 	bl	8000b20 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d302      	bcc.n	8004c18 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e04e      	b.n	8004cba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d037      	beq.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2b80      	cmp	r3, #128	@ 0x80
 8004c2e:	d034      	beq.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2b40      	cmp	r3, #64	@ 0x40
 8004c34:	d031      	beq.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	f003 0308 	and.w	r3, r3, #8
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d110      	bne.n	8004c66 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2208      	movs	r2, #8
 8004c4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 f838 	bl	8004cc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2208      	movs	r2, #8
 8004c56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e029      	b.n	8004cba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c74:	d111      	bne.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 f81e 	bl	8004cc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e00f      	b.n	8004cba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69da      	ldr	r2, [r3, #28]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	bf0c      	ite	eq
 8004caa:	2301      	moveq	r3, #1
 8004cac:	2300      	movne	r3, #0
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	79fb      	ldrb	r3, [r7, #7]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d0a0      	beq.n	8004bfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b095      	sub	sp, #84	@ 0x54
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cd2:	e853 3f00 	ldrex	r3, [r3]
 8004cd6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ce8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004cee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cf0:	e841 2300 	strex	r3, r2, [r1]
 8004cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1e6      	bne.n	8004cca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	3308      	adds	r3, #8
 8004d02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d04:	6a3b      	ldr	r3, [r7, #32]
 8004d06:	e853 3f00 	ldrex	r3, [r3]
 8004d0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	f023 0301 	bic.w	r3, r3, #1
 8004d12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3308      	adds	r3, #8
 8004d1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d24:	e841 2300 	strex	r3, r2, [r1]
 8004d28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1e5      	bne.n	8004cfc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d118      	bne.n	8004d6a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	e853 3f00 	ldrex	r3, [r3]
 8004d44:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	f023 0310 	bic.w	r3, r3, #16
 8004d4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	461a      	mov	r2, r3
 8004d54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d56:	61bb      	str	r3, [r7, #24]
 8004d58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5a:	6979      	ldr	r1, [r7, #20]
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	e841 2300 	strex	r3, r2, [r1]
 8004d62:	613b      	str	r3, [r7, #16]
   return(result);
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1e6      	bne.n	8004d38 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004d7e:	bf00      	nop
 8004d80:	3754      	adds	r7, #84	@ 0x54
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b084      	sub	sp, #16
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f7ff fbe9 	bl	8004580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dae:	bf00      	nop
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b088      	sub	sp, #32
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	e853 3f00 	ldrex	r3, [r3]
 8004dca:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dd2:	61fb      	str	r3, [r7, #28]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	61bb      	str	r3, [r7, #24]
 8004dde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de0:	6979      	ldr	r1, [r7, #20]
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	e841 2300 	strex	r3, r2, [r1]
 8004de8:	613b      	str	r3, [r7, #16]
   return(result);
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1e6      	bne.n	8004dbe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2220      	movs	r2, #32
 8004df4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7ff fbb5 	bl	800456c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e02:	bf00      	nop
 8004e04:	3720      	adds	r7, #32
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e12:	bf00      	nop
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <memset>:
 8004e1e:	4402      	add	r2, r0
 8004e20:	4603      	mov	r3, r0
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d100      	bne.n	8004e28 <memset+0xa>
 8004e26:	4770      	bx	lr
 8004e28:	f803 1b01 	strb.w	r1, [r3], #1
 8004e2c:	e7f9      	b.n	8004e22 <memset+0x4>
	...

08004e30 <__libc_init_array>:
 8004e30:	b570      	push	{r4, r5, r6, lr}
 8004e32:	4d0d      	ldr	r5, [pc, #52]	@ (8004e68 <__libc_init_array+0x38>)
 8004e34:	4c0d      	ldr	r4, [pc, #52]	@ (8004e6c <__libc_init_array+0x3c>)
 8004e36:	1b64      	subs	r4, r4, r5
 8004e38:	10a4      	asrs	r4, r4, #2
 8004e3a:	2600      	movs	r6, #0
 8004e3c:	42a6      	cmp	r6, r4
 8004e3e:	d109      	bne.n	8004e54 <__libc_init_array+0x24>
 8004e40:	4d0b      	ldr	r5, [pc, #44]	@ (8004e70 <__libc_init_array+0x40>)
 8004e42:	4c0c      	ldr	r4, [pc, #48]	@ (8004e74 <__libc_init_array+0x44>)
 8004e44:	f000 f818 	bl	8004e78 <_init>
 8004e48:	1b64      	subs	r4, r4, r5
 8004e4a:	10a4      	asrs	r4, r4, #2
 8004e4c:	2600      	movs	r6, #0
 8004e4e:	42a6      	cmp	r6, r4
 8004e50:	d105      	bne.n	8004e5e <__libc_init_array+0x2e>
 8004e52:	bd70      	pop	{r4, r5, r6, pc}
 8004e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e58:	4798      	blx	r3
 8004e5a:	3601      	adds	r6, #1
 8004e5c:	e7ee      	b.n	8004e3c <__libc_init_array+0xc>
 8004e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e62:	4798      	blx	r3
 8004e64:	3601      	adds	r6, #1
 8004e66:	e7f2      	b.n	8004e4e <__libc_init_array+0x1e>
 8004e68:	08004ec8 	.word	0x08004ec8
 8004e6c:	08004ec8 	.word	0x08004ec8
 8004e70:	08004ec8 	.word	0x08004ec8
 8004e74:	08004ecc 	.word	0x08004ecc

08004e78 <_init>:
 8004e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7a:	bf00      	nop
 8004e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e7e:	bc08      	pop	{r3}
 8004e80:	469e      	mov	lr, r3
 8004e82:	4770      	bx	lr

08004e84 <_fini>:
 8004e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e86:	bf00      	nop
 8004e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e8a:	bc08      	pop	{r3}
 8004e8c:	469e      	mov	lr, r3
 8004e8e:	4770      	bx	lr
